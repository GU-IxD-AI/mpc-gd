//
//  HKStyle.swift
//  NoSecondChance
//
//  Created by Rob Saunders on 08/12/2016.
//  Copyright Â© 2016 MetaMakers Ltd. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

open class HKStyle : NSObject {

    //// Cache

    fileprivate struct Cache {
        static var imageOfSliderBarBackground: UIImage?
        static var sliderBarBackgroundTargets: [AnyObject]?
        static var imageOfIconCanvas: UIImage?
        static var iconCanvasTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc open dynamic class func drawSliderHandle(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.2)
        shadow.shadowOffset = CGSize(width: 2, height: 4)
        shadow.shadowBlurRadius = 8

        //// Variable Declarations
        let unselected = !selected

        //// Group
        //// outerHandle Drawing
        let outerHandlePath = UIBezierPath(ovalIn: CGRect(x: 10, y: 10, width: 28, height: 28))
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        outerHandlePath.fill()
        context.restoreGState()



        if (unselected) {
            //// innerHandleUnselected Drawing
            let innerHandleUnselectedPath = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 22, height: 22))
            unselectedColor.setFill()
            innerHandleUnselectedPath.fill()
        }


        if (selected) {
            //// innerHandleSelected Drawing
            let innerHandleSelectedPath = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 22, height: 22))
            selectedColor.setFill()
            innerHandleSelectedPath.fill()
        }
    }

    @objc open dynamic class func drawSliderBarHighlight(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000)) {

        //// backgroundHighlight Drawing
        let backgroundHighlightPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 24, height: 2), cornerRadius: 1)
        selectedColor.setFill()
        backgroundHighlightPath.fill()
    }

    @objc open dynamic class func drawSliderBarBackground() {
        //// Color Declarations
        let backgroundSliderBar = UIColor(red: 0.667, green: 0.667, blue: 0.667, alpha: 1.000)

        //// background Drawing
        let backgroundPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 24, height: 2), cornerRadius: 1)
        backgroundSliderBar.setFill()
        backgroundPath.fill()
    }

    @objc open dynamic class func drawCard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 34), resizing: ResizingBehavior = .aspectFit, selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 34)


        //// Color Declarations
        let unselectedBackgroundColor = selectedBackgroundColor.withAlphaComponent(0.8)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedRectangle Drawing
            let selectedRectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 26, height: 34), cornerRadius: 3)
            selectedBackgroundColor.setFill()
            selectedRectanglePath.fill()
        }


        if (unselected) {
            //// unselectedRectangle Drawing
            let unselectedRectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 26, height: 34), cornerRadius: 3)
            unselectedBackgroundColor.setFill()
            unselectedRectanglePath.fill()
        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawImpulseUnfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            selectedColor.setStroke()
            ovalPath.lineWidth = 1
            ovalPath.stroke()


            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 8.79, y: 8.55))
            bezierPath.addLine(to: CGPoint(x: 11.68, y: 12))
            selectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.miterLimit = 10
            bezierPath.lineCapStyle = .square
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 10.62, y: 8.98))
            bezier2Path.addLine(to: CGPoint(x: 7.83, y: 7.41))
            bezier2Path.addLine(to: CGPoint(x: 8.89, y: 10.43))
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.miterLimit = 10
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 21.06, y: 8.55))
            bezier3Path.addLine(to: CGPoint(x: 18.16, y: 12))
            selectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.miterLimit = 10
            bezier3Path.lineCapStyle = .square
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 19.23, y: 8.98))
            bezier4Path.addLine(to: CGPoint(x: 22.02, y: 7.41))
            bezier4Path.addLine(to: CGPoint(x: 20.96, y: 10.43))
            selectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.miterLimit = 10
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 7.55, y: 20.06))
            bezier5Path.addLine(to: CGPoint(x: 11, y: 17.16))
            selectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.miterLimit = 10
            bezier5Path.lineCapStyle = .square
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 7.98, y: 18.23))
            bezier6Path.addLine(to: CGPoint(x: 6.41, y: 21.02))
            bezier6Path.addLine(to: CGPoint(x: 9.43, y: 19.96))
            selectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.miterLimit = 10
            bezier6Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 22.29, y: 21.06))
            bezier7Path.addLine(to: CGPoint(x: 18.85, y: 18.16))
            selectedColor.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.miterLimit = 10
            bezier7Path.lineCapStyle = .square
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 21.87, y: 19.23))
            bezier8Path.addLine(to: CGPoint(x: 23.44, y: 22.02))
            bezier8Path.addLine(to: CGPoint(x: 20.42, y: 20.96))
            selectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.miterLimit = 10
            bezier8Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            unselectedColor.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 8.79, y: 8.55))
            bezier9Path.addLine(to: CGPoint(x: 11.68, y: 12))
            unselectedColor.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.miterLimit = 10
            bezier9Path.lineCapStyle = .square
            bezier9Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 10.62, y: 8.98))
            bezier10Path.addLine(to: CGPoint(x: 7.83, y: 7.41))
            bezier10Path.addLine(to: CGPoint(x: 8.89, y: 10.43))
            unselectedColor.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.miterLimit = 10
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 21.06, y: 8.55))
            bezier11Path.addLine(to: CGPoint(x: 18.16, y: 12))
            unselectedColor.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.miterLimit = 10
            bezier11Path.lineCapStyle = .square
            bezier11Path.stroke()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 19.23, y: 8.98))
            bezier12Path.addLine(to: CGPoint(x: 22.02, y: 7.41))
            bezier12Path.addLine(to: CGPoint(x: 20.96, y: 10.43))
            unselectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.miterLimit = 10
            bezier12Path.stroke()


            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 7.55, y: 20.06))
            bezier13Path.addLine(to: CGPoint(x: 11, y: 17.16))
            unselectedColor.setStroke()
            bezier13Path.lineWidth = 1
            bezier13Path.miterLimit = 10
            bezier13Path.lineCapStyle = .square
            bezier13Path.stroke()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 7.98, y: 18.23))
            bezier14Path.addLine(to: CGPoint(x: 6.41, y: 21.02))
            bezier14Path.addLine(to: CGPoint(x: 9.43, y: 19.96))
            unselectedColor.setStroke()
            bezier14Path.lineWidth = 1
            bezier14Path.miterLimit = 10
            bezier14Path.stroke()


            //// Bezier 15 Drawing
            let bezier15Path = UIBezierPath()
            bezier15Path.move(to: CGPoint(x: 22.29, y: 21.06))
            bezier15Path.addLine(to: CGPoint(x: 18.85, y: 18.16))
            unselectedColor.setStroke()
            bezier15Path.lineWidth = 1
            bezier15Path.miterLimit = 10
            bezier15Path.lineCapStyle = .square
            bezier15Path.stroke()


            //// Bezier 16 Drawing
            let bezier16Path = UIBezierPath()
            bezier16Path.move(to: CGPoint(x: 21.87, y: 19.23))
            bezier16Path.addLine(to: CGPoint(x: 23.44, y: 22.02))
            bezier16Path.addLine(to: CGPoint(x: 20.42, y: 20.96))
            unselectedColor.setStroke()
            bezier16Path.lineWidth = 1
            bezier16Path.miterLimit = 10
            bezier16Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawIconCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        context.restoreGState()

    }

    @objc open dynamic class func drawSpawnUnfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (unselected) {
            //// unselectedGroup
            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 15, y: 21))
            bezier13Path.addLine(to: CGPoint(x: 15, y: 23))
            unselectedColor.setStroke()
            bezier13Path.lineWidth = 1
            bezier13Path.lineCapStyle = .square
            bezier13Path.stroke()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 15, y: 9))
            bezier14Path.addLine(to: CGPoint(x: 15, y: 7))
            unselectedColor.setStroke()
            bezier14Path.lineWidth = 1
            bezier14Path.lineCapStyle = .square
            bezier14Path.stroke()


            //// Bezier 15 Drawing
            let bezier15Path = UIBezierPath()
            bezier15Path.move(to: CGPoint(x: 12, y: 20.2))
            bezier15Path.addLine(to: CGPoint(x: 11, y: 21.93))
            unselectedColor.setStroke()
            bezier15Path.lineWidth = 1
            bezier15Path.miterLimit = 10
            bezier15Path.lineCapStyle = .square
            bezier15Path.stroke()


            //// Bezier 16 Drawing
            let bezier16Path = UIBezierPath()
            bezier16Path.move(to: CGPoint(x: 18, y: 9.8))
            bezier16Path.addLine(to: CGPoint(x: 19, y: 8.07))
            unselectedColor.setStroke()
            bezier16Path.lineWidth = 1
            bezier16Path.miterLimit = 10
            bezier16Path.lineCapStyle = .square
            bezier16Path.stroke()


            //// Bezier 17 Drawing
            let bezier17Path = UIBezierPath()
            bezier17Path.move(to: CGPoint(x: 12, y: 9.8))
            bezier17Path.addLine(to: CGPoint(x: 11, y: 8.07))
            unselectedColor.setStroke()
            bezier17Path.lineWidth = 1
            bezier17Path.miterLimit = 10
            bezier17Path.lineCapStyle = .square
            bezier17Path.stroke()


            //// Bezier 18 Drawing
            let bezier18Path = UIBezierPath()
            bezier18Path.move(to: CGPoint(x: 18, y: 20.2))
            bezier18Path.addLine(to: CGPoint(x: 19, y: 21.93))
            unselectedColor.setStroke()
            bezier18Path.lineWidth = 1
            bezier18Path.miterLimit = 10
            bezier18Path.lineCapStyle = .square
            bezier18Path.stroke()


            //// Bezier 19 Drawing
            let bezier19Path = UIBezierPath()
            bezier19Path.move(to: CGPoint(x: 9.8, y: 18))
            bezier19Path.addLine(to: CGPoint(x: 8.07, y: 19))
            unselectedColor.setStroke()
            bezier19Path.lineWidth = 1
            bezier19Path.miterLimit = 10
            bezier19Path.lineCapStyle = .square
            bezier19Path.stroke()


            //// Bezier 20 Drawing
            let bezier20Path = UIBezierPath()
            bezier20Path.move(to: CGPoint(x: 20.2, y: 12))
            bezier20Path.addLine(to: CGPoint(x: 21.93, y: 11))
            unselectedColor.setStroke()
            bezier20Path.lineWidth = 1
            bezier20Path.miterLimit = 10
            bezier20Path.lineCapStyle = .square
            bezier20Path.stroke()


            //// Bezier 21 Drawing
            let bezier21Path = UIBezierPath()
            bezier21Path.move(to: CGPoint(x: 9.8, y: 12))
            bezier21Path.addLine(to: CGPoint(x: 8.07, y: 11))
            unselectedColor.setStroke()
            bezier21Path.lineWidth = 1
            bezier21Path.miterLimit = 10
            bezier21Path.lineCapStyle = .square
            bezier21Path.stroke()


            //// Bezier 22 Drawing
            let bezier22Path = UIBezierPath()
            bezier22Path.move(to: CGPoint(x: 20.2, y: 18))
            bezier22Path.addLine(to: CGPoint(x: 21.93, y: 19))
            unselectedColor.setStroke()
            bezier22Path.lineWidth = 1
            bezier22Path.miterLimit = 10
            bezier22Path.lineCapStyle = .square
            bezier22Path.stroke()


            //// Bezier 23 Drawing
            let bezier23Path = UIBezierPath()
            bezier23Path.move(to: CGPoint(x: 9, y: 15))
            bezier23Path.addLine(to: CGPoint(x: 7, y: 15))
            unselectedColor.setStroke()
            bezier23Path.lineWidth = 1
            bezier23Path.lineCapStyle = .square
            bezier23Path.stroke()


            //// Bezier 24 Drawing
            let bezier24Path = UIBezierPath()
            bezier24Path.move(to: CGPoint(x: 21, y: 15))
            bezier24Path.addLine(to: CGPoint(x: 23, y: 15))
            unselectedColor.setStroke()
            bezier24Path.lineWidth = 1
            bezier24Path.lineCapStyle = .square
            bezier24Path.stroke()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            unselectedColor.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


        }


        if (selected) {
            //// selectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 15, y: 21))
            bezierPath.addLine(to: CGPoint(x: 15, y: 23))
            selectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.lineCapStyle = .square
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 15, y: 9))
            bezier2Path.addLine(to: CGPoint(x: 15, y: 7))
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.lineCapStyle = .square
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 12, y: 20.2))
            bezier3Path.addLine(to: CGPoint(x: 11, y: 21.93))
            selectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.miterLimit = 10
            bezier3Path.lineCapStyle = .square
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 18, y: 9.8))
            bezier4Path.addLine(to: CGPoint(x: 19, y: 8.07))
            selectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.miterLimit = 10
            bezier4Path.lineCapStyle = .square
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 12, y: 9.8))
            bezier5Path.addLine(to: CGPoint(x: 11, y: 8.07))
            selectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.miterLimit = 10
            bezier5Path.lineCapStyle = .square
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 18, y: 20.2))
            bezier6Path.addLine(to: CGPoint(x: 19, y: 21.93))
            selectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.miterLimit = 10
            bezier6Path.lineCapStyle = .square
            bezier6Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 9.8, y: 18))
            bezier7Path.addLine(to: CGPoint(x: 8.07, y: 19))
            selectedColor.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.miterLimit = 10
            bezier7Path.lineCapStyle = .square
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 20.2, y: 12))
            bezier8Path.addLine(to: CGPoint(x: 21.93, y: 11))
            selectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.miterLimit = 10
            bezier8Path.lineCapStyle = .square
            bezier8Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 9.8, y: 12))
            bezier9Path.addLine(to: CGPoint(x: 8.07, y: 11))
            selectedColor.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.miterLimit = 10
            bezier9Path.lineCapStyle = .square
            bezier9Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 20.2, y: 18))
            bezier10Path.addLine(to: CGPoint(x: 21.93, y: 19))
            selectedColor.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.miterLimit = 10
            bezier10Path.lineCapStyle = .square
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 9, y: 15))
            bezier11Path.addLine(to: CGPoint(x: 7, y: 15))
            selectedColor.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.lineCapStyle = .square
            bezier11Path.stroke()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 21, y: 15))
            bezier12Path.addLine(to: CGPoint(x: 23, y: 15))
            selectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.lineCapStyle = .square
            bezier12Path.stroke()


            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            selectedColor.setStroke()
            ovalPath.lineWidth = 1
            ovalPath.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawSpawnFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (unselected) {
            //// unselectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 15, y: 21))
            bezierPath.addLine(to: CGPoint(x: 15, y: 23))
            unselectedColor.setFill()
            bezierPath.fill()
            unselectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.lineCapStyle = .square
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 15, y: 9))
            bezier2Path.addLine(to: CGPoint(x: 15, y: 7))
            unselectedColor.setFill()
            bezier2Path.fill()
            unselectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.lineCapStyle = .square
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 12, y: 20.2))
            bezier3Path.addLine(to: CGPoint(x: 11, y: 21.93))
            unselectedColor.setFill()
            bezier3Path.fill()
            unselectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.miterLimit = 10
            bezier3Path.lineCapStyle = .square
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 18, y: 9.8))
            bezier4Path.addLine(to: CGPoint(x: 19, y: 8.07))
            unselectedColor.setFill()
            bezier4Path.fill()
            unselectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.miterLimit = 10
            bezier4Path.lineCapStyle = .square
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 12, y: 9.8))
            bezier5Path.addLine(to: CGPoint(x: 11, y: 8.07))
            unselectedColor.setFill()
            bezier5Path.fill()
            unselectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.miterLimit = 10
            bezier5Path.lineCapStyle = .square
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 18, y: 20.2))
            bezier6Path.addLine(to: CGPoint(x: 19, y: 21.93))
            unselectedColor.setFill()
            bezier6Path.fill()
            unselectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.miterLimit = 10
            bezier6Path.lineCapStyle = .square
            bezier6Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 9.8, y: 18))
            bezier7Path.addLine(to: CGPoint(x: 8.07, y: 19))
            unselectedColor.setFill()
            bezier7Path.fill()
            unselectedColor.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.miterLimit = 10
            bezier7Path.lineCapStyle = .square
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 20.2, y: 12))
            bezier8Path.addLine(to: CGPoint(x: 21.93, y: 11))
            unselectedColor.setFill()
            bezier8Path.fill()
            unselectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.miterLimit = 10
            bezier8Path.lineCapStyle = .square
            bezier8Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 9.8, y: 12))
            bezier9Path.addLine(to: CGPoint(x: 8.07, y: 11))
            unselectedColor.setFill()
            bezier9Path.fill()
            unselectedColor.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.miterLimit = 10
            bezier9Path.lineCapStyle = .square
            bezier9Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 20.2, y: 18))
            bezier10Path.addLine(to: CGPoint(x: 21.93, y: 19))
            unselectedColor.setFill()
            bezier10Path.fill()
            unselectedColor.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.miterLimit = 10
            bezier10Path.lineCapStyle = .square
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 9, y: 15))
            bezier11Path.addLine(to: CGPoint(x: 7, y: 15))
            unselectedColor.setFill()
            bezier11Path.fill()
            unselectedColor.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.lineCapStyle = .square
            bezier11Path.stroke()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 21, y: 15))
            bezier12Path.addLine(to: CGPoint(x: 23, y: 15))
            unselectedColor.setFill()
            bezier12Path.fill()
            unselectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.lineCapStyle = .square
            bezier12Path.stroke()


            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            unselectedColor.setFill()
            ovalPath.fill()
            unselectedColor.setStroke()
            ovalPath.lineWidth = 0
            ovalPath.stroke()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            unselectedColor.setFill()
            oval2Path.fill()
            unselectedColor.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


        }


        if (selected) {
            //// selectedGroup
            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 15, y: 21))
            bezier13Path.addLine(to: CGPoint(x: 15, y: 23))
            selectedColor.setFill()
            bezier13Path.fill()
            selectedColor.setStroke()
            bezier13Path.lineWidth = 1
            bezier13Path.lineCapStyle = .square
            bezier13Path.stroke()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 15, y: 9))
            bezier14Path.addLine(to: CGPoint(x: 15, y: 7))
            selectedColor.setFill()
            bezier14Path.fill()
            selectedColor.setStroke()
            bezier14Path.lineWidth = 1
            bezier14Path.lineCapStyle = .square
            bezier14Path.stroke()


            //// Bezier 15 Drawing
            let bezier15Path = UIBezierPath()
            bezier15Path.move(to: CGPoint(x: 12, y: 20.2))
            bezier15Path.addLine(to: CGPoint(x: 11, y: 21.93))
            selectedColor.setFill()
            bezier15Path.fill()
            selectedColor.setStroke()
            bezier15Path.lineWidth = 1
            bezier15Path.miterLimit = 10
            bezier15Path.lineCapStyle = .square
            bezier15Path.stroke()


            //// Bezier 16 Drawing
            let bezier16Path = UIBezierPath()
            bezier16Path.move(to: CGPoint(x: 18, y: 9.8))
            bezier16Path.addLine(to: CGPoint(x: 19, y: 8.07))
            selectedColor.setFill()
            bezier16Path.fill()
            selectedColor.setStroke()
            bezier16Path.lineWidth = 1
            bezier16Path.miterLimit = 10
            bezier16Path.lineCapStyle = .square
            bezier16Path.stroke()


            //// Bezier 17 Drawing
            let bezier17Path = UIBezierPath()
            bezier17Path.move(to: CGPoint(x: 12, y: 9.8))
            bezier17Path.addLine(to: CGPoint(x: 11, y: 8.07))
            selectedColor.setFill()
            bezier17Path.fill()
            selectedColor.setStroke()
            bezier17Path.lineWidth = 1
            bezier17Path.miterLimit = 10
            bezier17Path.lineCapStyle = .square
            bezier17Path.stroke()


            //// Bezier 18 Drawing
            let bezier18Path = UIBezierPath()
            bezier18Path.move(to: CGPoint(x: 18, y: 20.2))
            bezier18Path.addLine(to: CGPoint(x: 19, y: 21.93))
            selectedColor.setFill()
            bezier18Path.fill()
            selectedColor.setStroke()
            bezier18Path.lineWidth = 1
            bezier18Path.miterLimit = 10
            bezier18Path.lineCapStyle = .square
            bezier18Path.stroke()


            //// Bezier 19 Drawing
            let bezier19Path = UIBezierPath()
            bezier19Path.move(to: CGPoint(x: 9.8, y: 18))
            bezier19Path.addLine(to: CGPoint(x: 8.07, y: 19))
            selectedColor.setFill()
            bezier19Path.fill()
            selectedColor.setStroke()
            bezier19Path.lineWidth = 1
            bezier19Path.miterLimit = 10
            bezier19Path.lineCapStyle = .square
            bezier19Path.stroke()


            //// Bezier 20 Drawing
            let bezier20Path = UIBezierPath()
            bezier20Path.move(to: CGPoint(x: 20.2, y: 12))
            bezier20Path.addLine(to: CGPoint(x: 21.93, y: 11))
            selectedColor.setFill()
            bezier20Path.fill()
            selectedColor.setStroke()
            bezier20Path.lineWidth = 1
            bezier20Path.miterLimit = 10
            bezier20Path.lineCapStyle = .square
            bezier20Path.stroke()


            //// Bezier 21 Drawing
            let bezier21Path = UIBezierPath()
            bezier21Path.move(to: CGPoint(x: 9.8, y: 12))
            bezier21Path.addLine(to: CGPoint(x: 8.07, y: 11))
            selectedColor.setFill()
            bezier21Path.fill()
            selectedColor.setStroke()
            bezier21Path.lineWidth = 1
            bezier21Path.miterLimit = 10
            bezier21Path.lineCapStyle = .square
            bezier21Path.stroke()


            //// Bezier 22 Drawing
            let bezier22Path = UIBezierPath()
            bezier22Path.move(to: CGPoint(x: 20.2, y: 18))
            bezier22Path.addLine(to: CGPoint(x: 21.93, y: 19))
            selectedColor.setFill()
            bezier22Path.fill()
            selectedColor.setStroke()
            bezier22Path.lineWidth = 1
            bezier22Path.miterLimit = 10
            bezier22Path.lineCapStyle = .square
            bezier22Path.stroke()


            //// Bezier 23 Drawing
            let bezier23Path = UIBezierPath()
            bezier23Path.move(to: CGPoint(x: 9, y: 15))
            bezier23Path.addLine(to: CGPoint(x: 7, y: 15))
            selectedColor.setFill()
            bezier23Path.fill()
            selectedColor.setStroke()
            bezier23Path.lineWidth = 1
            bezier23Path.lineCapStyle = .square
            bezier23Path.stroke()


            //// Bezier 24 Drawing
            let bezier24Path = UIBezierPath()
            bezier24Path.move(to: CGPoint(x: 21, y: 15))
            bezier24Path.addLine(to: CGPoint(x: 23, y: 15))
            selectedColor.setFill()
            bezier24Path.fill()
            selectedColor.setStroke()
            bezier24Path.lineWidth = 1
            bezier24Path.lineCapStyle = .square
            bezier24Path.stroke()


            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            selectedColor.setFill()
            oval3Path.fill()
            selectedColor.setStroke()
            oval3Path.lineWidth = 0
            oval3Path.stroke()


            //// Oval 4 Drawing
            let oval4Path = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            selectedColor.setFill()
            oval4Path.fill()
            selectedColor.setStroke()
            oval4Path.lineWidth = 1
            oval4Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawImpulseFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            selectedColor.setFill()
            ovalPath.fill()
            selectedColor.setStroke()
            ovalPath.lineWidth = 0
            ovalPath.stroke()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            selectedColor.setFill()
            oval2Path.fill()
            selectedColor.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 8.79, y: 8.55))
            bezierPath.addLine(to: CGPoint(x: 11.68, y: 12))
            selectedColor.setFill()
            bezierPath.fill()
            selectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.miterLimit = 10
            bezierPath.lineCapStyle = .square
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 10.62, y: 8.98))
            bezier2Path.addLine(to: CGPoint(x: 7.83, y: 7.41))
            bezier2Path.addLine(to: CGPoint(x: 8.89, y: 10.43))
            selectedColor.setFill()
            bezier2Path.fill()
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.miterLimit = 10
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 21.06, y: 8.55))
            bezier3Path.addLine(to: CGPoint(x: 18.16, y: 12))
            selectedColor.setFill()
            bezier3Path.fill()
            selectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.miterLimit = 10
            bezier3Path.lineCapStyle = .square
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 19.23, y: 8.98))
            bezier4Path.addLine(to: CGPoint(x: 22.02, y: 7.41))
            bezier4Path.addLine(to: CGPoint(x: 20.96, y: 10.43))
            selectedColor.setFill()
            bezier4Path.fill()
            selectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.miterLimit = 10
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 22.29, y: 21.06))
            bezier5Path.addLine(to: CGPoint(x: 18.85, y: 18.16))
            selectedColor.setFill()
            bezier5Path.fill()
            selectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.miterLimit = 10
            bezier5Path.lineCapStyle = .square
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 21.87, y: 19.23))
            bezier6Path.addLine(to: CGPoint(x: 23.44, y: 22.02))
            bezier6Path.addLine(to: CGPoint(x: 20.42, y: 20.96))
            selectedColor.setFill()
            bezier6Path.fill()
            selectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.miterLimit = 10
            bezier6Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 7.55, y: 20.06))
            bezier7Path.addLine(to: CGPoint(x: 11, y: 17.16))
            selectedColor.setFill()
            bezier7Path.fill()
            selectedColor.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.miterLimit = 10
            bezier7Path.lineCapStyle = .square
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 7.98, y: 18.23))
            bezier8Path.addLine(to: CGPoint(x: 6.41, y: 21.02))
            bezier8Path.addLine(to: CGPoint(x: 9.43, y: 19.96))
            selectedColor.setFill()
            bezier8Path.fill()
            selectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.miterLimit = 10
            bezier8Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            unselectedColor.setFill()
            oval3Path.fill()
            unselectedColor.setStroke()
            oval3Path.lineWidth = 0
            oval3Path.stroke()


            //// Oval 4 Drawing
            let oval4Path = UIBezierPath(ovalIn: CGRect(x: 13, y: 13, width: 4, height: 4))
            unselectedColor.setFill()
            oval4Path.fill()
            unselectedColor.setStroke()
            oval4Path.lineWidth = 1
            oval4Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 8.79, y: 8.55))
            bezier9Path.addLine(to: CGPoint(x: 11.68, y: 12))
            unselectedColor.setFill()
            bezier9Path.fill()
            unselectedColor.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.miterLimit = 10
            bezier9Path.lineCapStyle = .square
            bezier9Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 10.62, y: 8.98))
            bezier10Path.addLine(to: CGPoint(x: 7.83, y: 7.41))
            bezier10Path.addLine(to: CGPoint(x: 8.89, y: 10.43))
            unselectedColor.setFill()
            bezier10Path.fill()
            unselectedColor.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.miterLimit = 10
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 21.06, y: 8.55))
            bezier11Path.addLine(to: CGPoint(x: 18.16, y: 12))
            unselectedColor.setFill()
            bezier11Path.fill()
            unselectedColor.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.miterLimit = 10
            bezier11Path.lineCapStyle = .square
            bezier11Path.stroke()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 19.23, y: 8.98))
            bezier12Path.addLine(to: CGPoint(x: 22.02, y: 7.41))
            bezier12Path.addLine(to: CGPoint(x: 20.96, y: 10.43))
            unselectedColor.setFill()
            bezier12Path.fill()
            unselectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.miterLimit = 10
            bezier12Path.stroke()


            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 22.29, y: 21.06))
            bezier13Path.addLine(to: CGPoint(x: 18.85, y: 18.16))
            unselectedColor.setFill()
            bezier13Path.fill()
            unselectedColor.setStroke()
            bezier13Path.lineWidth = 1
            bezier13Path.miterLimit = 10
            bezier13Path.lineCapStyle = .square
            bezier13Path.stroke()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 21.87, y: 19.23))
            bezier14Path.addLine(to: CGPoint(x: 23.44, y: 22.02))
            bezier14Path.addLine(to: CGPoint(x: 20.42, y: 20.96))
            unselectedColor.setFill()
            bezier14Path.fill()
            unselectedColor.setStroke()
            bezier14Path.lineWidth = 1
            bezier14Path.miterLimit = 10
            bezier14Path.stroke()


            //// Bezier 15 Drawing
            let bezier15Path = UIBezierPath()
            bezier15Path.move(to: CGPoint(x: 7.55, y: 20.06))
            bezier15Path.addLine(to: CGPoint(x: 11, y: 17.16))
            unselectedColor.setFill()
            bezier15Path.fill()
            unselectedColor.setStroke()
            bezier15Path.lineWidth = 1
            bezier15Path.miterLimit = 10
            bezier15Path.lineCapStyle = .square
            bezier15Path.stroke()


            //// Bezier 16 Drawing
            let bezier16Path = UIBezierPath()
            bezier16Path.move(to: CGPoint(x: 7.98, y: 18.23))
            bezier16Path.addLine(to: CGPoint(x: 6.41, y: 21.02))
            bezier16Path.addLine(to: CGPoint(x: 9.43, y: 19.96))
            unselectedColor.setFill()
            bezier16Path.fill()
            unselectedColor.setStroke()
            bezier16Path.lineWidth = 1
            bezier16Path.miterLimit = 10
            bezier16Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawBehaveUnfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 20.98, y: 22.59))
            bezierPath.addCurve(to: CGPoint(x: 23.55, y: 20.08), controlPoint1: CGPoint(x: 22.12, y: 22.1), controlPoint2: CGPoint(x: 23.03, y: 21.2))
            selectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 18.28, y: 20.83))
            bezier2Path.addCurve(to: CGPoint(x: 21.88, y: 17.08), controlPoint1: CGPoint(x: 20.08, y: 20.36), controlPoint2: CGPoint(x: 21.48, y: 18.91))
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 15, y: 19))
            bezier3Path.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 17.76, y: 19), controlPoint2: CGPoint(x: 20, y: 16.76))
            selectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.stroke()


            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 8, y: 7, width: 10, height: 10))
            selectedColor.setStroke()
            ovalPath.lineWidth = 1
            ovalPath.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 20.98, y: 22.59))
            bezier4Path.addCurve(to: CGPoint(x: 23.55, y: 20.08), controlPoint1: CGPoint(x: 22.12, y: 22.1), controlPoint2: CGPoint(x: 23.03, y: 21.2))
            unselectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 18.28, y: 20.83))
            bezier5Path.addCurve(to: CGPoint(x: 21.88, y: 17.08), controlPoint1: CGPoint(x: 20.08, y: 20.36), controlPoint2: CGPoint(x: 21.48, y: 18.91))
            unselectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 15, y: 19))
            bezier6Path.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 17.76, y: 19), controlPoint2: CGPoint(x: 20, y: 16.76))
            unselectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.stroke()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 8, y: 7, width: 10, height: 10))
            unselectedColor.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawBehaveFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (unselected) {
            //// unselectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 20.98, y: 22.59))
            bezierPath.addCurve(to: CGPoint(x: 23.55, y: 20.08), controlPoint1: CGPoint(x: 22.12, y: 22.1), controlPoint2: CGPoint(x: 23.03, y: 21.2))
            unselectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 18.28, y: 20.83))
            bezier2Path.addCurve(to: CGPoint(x: 21.88, y: 17.08), controlPoint1: CGPoint(x: 20.08, y: 20.36), controlPoint2: CGPoint(x: 21.48, y: 18.91))
            unselectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 15, y: 19))
            bezier3Path.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 17.76, y: 19), controlPoint2: CGPoint(x: 20, y: 16.76))
            unselectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.stroke()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 8, y: 7, width: 10, height: 10))
            unselectedColor.setFill()
            oval2Path.fill()
            unselectedColor.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


        }


        if (selected) {
            //// selectedGroup
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 20.98, y: 22.59))
            bezier4Path.addCurve(to: CGPoint(x: 23.55, y: 20.08), controlPoint1: CGPoint(x: 22.12, y: 22.1), controlPoint2: CGPoint(x: 23.03, y: 21.2))
            selectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 18.28, y: 20.83))
            bezier5Path.addCurve(to: CGPoint(x: 21.88, y: 17.08), controlPoint1: CGPoint(x: 20.08, y: 20.36), controlPoint2: CGPoint(x: 21.48, y: 18.91))
            selectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 15, y: 19))
            bezier6Path.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 17.76, y: 19), controlPoint2: CGPoint(x: 20, y: 16.76))
            selectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.stroke()


            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 8, y: 7, width: 10, height: 10))
            selectedColor.setFill()
            ovalPath.fill()
            selectedColor.setStroke()
            ovalPath.lineWidth = 1
            ovalPath.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawAttractUnfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 8, y: 20))
            bezierPath.addLine(to: CGPoint(x: 12, y: 20))
            bezierPath.addLine(to: CGPoint(x: 12, y: 13))
            bezierPath.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 12, y: 11), controlPoint2: CGPoint(x: 13, y: 10))
            bezierPath.addCurve(to: CGPoint(x: 18, y: 13), controlPoint1: CGPoint(x: 17, y: 10), controlPoint2: CGPoint(x: 18, y: 11))
            bezierPath.addCurve(to: CGPoint(x: 18, y: 20), controlPoint1: CGPoint(x: 18, y: 15), controlPoint2: CGPoint(x: 18, y: 20))
            bezierPath.addLine(to: CGPoint(x: 22, y: 20))
            bezierPath.addLine(to: CGPoint(x: 22, y: 13))
            bezierPath.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 22, y: 9), controlPoint2: CGPoint(x: 19, y: 6))
            bezierPath.addCurve(to: CGPoint(x: 8, y: 13), controlPoint1: CGPoint(x: 11, y: 6), controlPoint2: CGPoint(x: 8, y: 9))
            bezierPath.addLine(to: CGPoint(x: 8, y: 20))
            bezierPath.close()
            selectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.stroke()


            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 8, y: 20, width: 4, height: 4))
            selectedColor.setStroke()
            rectanglePath.lineWidth = 1
            rectanglePath.stroke()


            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(rect: CGRect(x: 18, y: 20, width: 4, height: 4))
            selectedColor.setStroke()
            rectangle2Path.lineWidth = 1
            rectangle2Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 8, y: 20))
            bezier2Path.addLine(to: CGPoint(x: 12, y: 20))
            bezier2Path.addLine(to: CGPoint(x: 12, y: 13))
            bezier2Path.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 12, y: 11), controlPoint2: CGPoint(x: 13, y: 10))
            bezier2Path.addCurve(to: CGPoint(x: 18, y: 13), controlPoint1: CGPoint(x: 17, y: 10), controlPoint2: CGPoint(x: 18, y: 11))
            bezier2Path.addCurve(to: CGPoint(x: 18, y: 20), controlPoint1: CGPoint(x: 18, y: 15), controlPoint2: CGPoint(x: 18, y: 20))
            bezier2Path.addLine(to: CGPoint(x: 22, y: 20))
            bezier2Path.addLine(to: CGPoint(x: 22, y: 13))
            bezier2Path.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 22, y: 9), controlPoint2: CGPoint(x: 19, y: 6))
            bezier2Path.addCurve(to: CGPoint(x: 8, y: 13), controlPoint1: CGPoint(x: 11, y: 6), controlPoint2: CGPoint(x: 8, y: 9))
            bezier2Path.addLine(to: CGPoint(x: 8, y: 20))
            bezier2Path.close()
            unselectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()


            //// Rectangle 3 Drawing
            let rectangle3Path = UIBezierPath(rect: CGRect(x: 8, y: 20, width: 4, height: 4))
            unselectedColor.setStroke()
            rectangle3Path.lineWidth = 1
            rectangle3Path.stroke()


            //// Rectangle 4 Drawing
            let rectangle4Path = UIBezierPath(rect: CGRect(x: 18, y: 20, width: 4, height: 4))
            unselectedColor.setStroke()
            rectangle4Path.lineWidth = 1
            rectangle4Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawAttractFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 8, y: 20))
            bezierPath.addLine(to: CGPoint(x: 12, y: 20))
            bezierPath.addLine(to: CGPoint(x: 12, y: 13))
            bezierPath.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 12, y: 11), controlPoint2: CGPoint(x: 13, y: 10))
            bezierPath.addCurve(to: CGPoint(x: 18, y: 13), controlPoint1: CGPoint(x: 17, y: 10), controlPoint2: CGPoint(x: 18, y: 11))
            bezierPath.addCurve(to: CGPoint(x: 18, y: 20), controlPoint1: CGPoint(x: 18, y: 15), controlPoint2: CGPoint(x: 18, y: 20))
            bezierPath.addLine(to: CGPoint(x: 22, y: 20))
            bezierPath.addLine(to: CGPoint(x: 22, y: 13))
            bezierPath.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 22, y: 9), controlPoint2: CGPoint(x: 19, y: 6))
            bezierPath.addCurve(to: CGPoint(x: 8, y: 13), controlPoint1: CGPoint(x: 11, y: 6), controlPoint2: CGPoint(x: 8, y: 9))
            bezierPath.addLine(to: CGPoint(x: 8, y: 20))
            bezierPath.close()
            selectedColor.setFill()
            bezierPath.fill()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 8, y: 20))
            bezier2Path.addLine(to: CGPoint(x: 12, y: 20))
            bezier2Path.addLine(to: CGPoint(x: 12, y: 13))
            bezier2Path.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 12, y: 11), controlPoint2: CGPoint(x: 13, y: 10))
            bezier2Path.addCurve(to: CGPoint(x: 18, y: 13), controlPoint1: CGPoint(x: 17, y: 10), controlPoint2: CGPoint(x: 18, y: 11))
            bezier2Path.addCurve(to: CGPoint(x: 18, y: 20), controlPoint1: CGPoint(x: 18, y: 15), controlPoint2: CGPoint(x: 18, y: 20))
            bezier2Path.addLine(to: CGPoint(x: 22, y: 20))
            bezier2Path.addLine(to: CGPoint(x: 22, y: 13))
            bezier2Path.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 22, y: 9), controlPoint2: CGPoint(x: 19, y: 6))
            bezier2Path.addCurve(to: CGPoint(x: 8, y: 13), controlPoint1: CGPoint(x: 11, y: 6), controlPoint2: CGPoint(x: 8, y: 9))
            bezier2Path.addLine(to: CGPoint(x: 8, y: 20))
            bezier2Path.close()
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()


            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 8, y: 20, width: 4, height: 4))
            selectedColor.setStroke()
            rectanglePath.lineWidth = 1
            rectanglePath.stroke()


            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(rect: CGRect(x: 18, y: 20, width: 4, height: 4))
            selectedColor.setStroke()
            rectangle2Path.lineWidth = 1
            rectangle2Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 8, y: 20))
            bezier3Path.addLine(to: CGPoint(x: 12, y: 20))
            bezier3Path.addLine(to: CGPoint(x: 12, y: 13))
            bezier3Path.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 12, y: 11), controlPoint2: CGPoint(x: 13, y: 10))
            bezier3Path.addCurve(to: CGPoint(x: 18, y: 13), controlPoint1: CGPoint(x: 17, y: 10), controlPoint2: CGPoint(x: 18, y: 11))
            bezier3Path.addCurve(to: CGPoint(x: 18, y: 20), controlPoint1: CGPoint(x: 18, y: 15), controlPoint2: CGPoint(x: 18, y: 20))
            bezier3Path.addLine(to: CGPoint(x: 22, y: 20))
            bezier3Path.addLine(to: CGPoint(x: 22, y: 13))
            bezier3Path.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 22, y: 9), controlPoint2: CGPoint(x: 19, y: 6))
            bezier3Path.addCurve(to: CGPoint(x: 8, y: 13), controlPoint1: CGPoint(x: 11, y: 6), controlPoint2: CGPoint(x: 8, y: 9))
            bezier3Path.addLine(to: CGPoint(x: 8, y: 20))
            bezier3Path.close()
            unselectedColor.setFill()
            bezier3Path.fill()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 8, y: 20))
            bezier4Path.addLine(to: CGPoint(x: 12, y: 20))
            bezier4Path.addLine(to: CGPoint(x: 12, y: 13))
            bezier4Path.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 12, y: 11), controlPoint2: CGPoint(x: 13, y: 10))
            bezier4Path.addCurve(to: CGPoint(x: 18, y: 13), controlPoint1: CGPoint(x: 17, y: 10), controlPoint2: CGPoint(x: 18, y: 11))
            bezier4Path.addCurve(to: CGPoint(x: 18, y: 20), controlPoint1: CGPoint(x: 18, y: 15), controlPoint2: CGPoint(x: 18, y: 20))
            bezier4Path.addLine(to: CGPoint(x: 22, y: 20))
            bezier4Path.addLine(to: CGPoint(x: 22, y: 13))
            bezier4Path.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 22, y: 9), controlPoint2: CGPoint(x: 19, y: 6))
            bezier4Path.addCurve(to: CGPoint(x: 8, y: 13), controlPoint1: CGPoint(x: 11, y: 6), controlPoint2: CGPoint(x: 8, y: 9))
            bezier4Path.addLine(to: CGPoint(x: 8, y: 20))
            bezier4Path.close()
            unselectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.stroke()


            //// Rectangle 3 Drawing
            let rectangle3Path = UIBezierPath(rect: CGRect(x: 8, y: 20, width: 4, height: 4))
            unselectedColor.setStroke()
            rectangle3Path.lineWidth = 1
            rectangle3Path.stroke()


            //// Rectangle 4 Drawing
            let rectangle4Path = UIBezierPath(rect: CGRect(x: 18, y: 20, width: 4, height: 4))
            unselectedColor.setStroke()
            rectangle4Path.lineWidth = 1
            rectangle4Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawInteractUnfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 15.51, y: 8.47))
            bezierPath.addCurve(to: CGPoint(x: 15.04, y: 4.45), controlPoint1: CGPoint(x: 16.29, y: 7.21), controlPoint2: CGPoint(x: 16.13, y: 5.54))
            bezierPath.addCurve(to: CGPoint(x: 10.45, y: 4.45), controlPoint1: CGPoint(x: 13.78, y: 3.18), controlPoint2: CGPoint(x: 11.72, y: 3.18))
            bezierPath.addCurve(to: CGPoint(x: 10.02, y: 8.52), controlPoint1: CGPoint(x: 9.34, y: 5.56), controlPoint2: CGPoint(x: 9.2, y: 7.26))
            selectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.miterLimit = 10
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 11.5, y: 18.52))
            bezier2Path.addCurve(to: CGPoint(x: 11.5, y: 7), controlPoint1: CGPoint(x: 11.5, y: 18.52), controlPoint2: CGPoint(x: 11.5, y: 7.99))
            bezier2Path.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6), controlPoint2: CGPoint(x: 12.16, y: 5.5))
            bezier2Path.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 13.48, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6))
            bezier2Path.addCurve(to: CGPoint(x: 14, y: 14), controlPoint1: CGPoint(x: 14, y: 7.99), controlPoint2: CGPoint(x: 14, y: 13.5))
            bezier2Path.addCurve(to: CGPoint(x: 14.52, y: 15), controlPoint1: CGPoint(x: 14, y: 14.5), controlPoint2: CGPoint(x: 14, y: 15))
            bezier2Path.addCurve(to: CGPoint(x: 15, y: 14), controlPoint1: CGPoint(x: 15.05, y: 15), controlPoint2: CGPoint(x: 15, y: 14.5))
            bezier2Path.addCurve(to: CGPoint(x: 15, y: 13), controlPoint1: CGPoint(x: 15, y: 13.5), controlPoint2: CGPoint(x: 15, y: 14))
            bezier2Path.addCurve(to: CGPoint(x: 16.25, y: 11.5), controlPoint1: CGPoint(x: 15, y: 12), controlPoint2: CGPoint(x: 15.5, y: 11.5))
            bezier2Path.addCurve(to: CGPoint(x: 17.5, y: 13), controlPoint1: CGPoint(x: 17, y: 11.5), controlPoint2: CGPoint(x: 17.5, y: 12))
            bezier2Path.addLine(to: CGPoint(x: 17.5, y: 14))
            bezier2Path.addCurve(to: CGPoint(x: 18, y: 15), controlPoint1: CGPoint(x: 17.5, y: 14.48), controlPoint2: CGPoint(x: 17.5, y: 15))
            bezier2Path.addCurve(to: CGPoint(x: 18.5, y: 14), controlPoint1: CGPoint(x: 18.5, y: 15), controlPoint2: CGPoint(x: 18.5, y: 14.5))
            bezier2Path.addCurve(to: CGPoint(x: 18.5, y: 13.5), controlPoint1: CGPoint(x: 18.5, y: 13.5), controlPoint2: CGPoint(x: 18.5, y: 14.5))
            bezier2Path.addCurve(to: CGPoint(x: 19.75, y: 12), controlPoint1: CGPoint(x: 18.5, y: 12.5), controlPoint2: CGPoint(x: 19, y: 12))
            bezier2Path.addCurve(to: CGPoint(x: 21, y: 13.5), controlPoint1: CGPoint(x: 20.5, y: 12), controlPoint2: CGPoint(x: 21, y: 12.5))
            bezier2Path.addCurve(to: CGPoint(x: 21, y: 15), controlPoint1: CGPoint(x: 21, y: 14.5), controlPoint2: CGPoint(x: 21, y: 14.5))
            bezier2Path.addCurve(to: CGPoint(x: 21.5, y: 16), controlPoint1: CGPoint(x: 21, y: 15.5), controlPoint2: CGPoint(x: 21, y: 16))
            bezier2Path.addCurve(to: CGPoint(x: 22, y: 15), controlPoint1: CGPoint(x: 22, y: 16), controlPoint2: CGPoint(x: 22, y: 15.5))
            bezier2Path.addCurve(to: CGPoint(x: 22, y: 14.5), controlPoint1: CGPoint(x: 22, y: 14.5), controlPoint2: CGPoint(x: 22, y: 15.5))
            bezier2Path.addCurve(to: CGPoint(x: 23, y: 13), controlPoint1: CGPoint(x: 22, y: 13.5), controlPoint2: CGPoint(x: 22.21, y: 13))
            bezier2Path.addCurve(to: CGPoint(x: 24, y: 14.5), controlPoint1: CGPoint(x: 23.71, y: 13), controlPoint2: CGPoint(x: 24, y: 13.36))
            bezier2Path.addCurve(to: CGPoint(x: 24, y: 17.06), controlPoint1: CGPoint(x: 24, y: 14.87), controlPoint2: CGPoint(x: 24, y: 15.07))
            bezier2Path.addCurve(to: CGPoint(x: 24, y: 22), controlPoint1: CGPoint(x: 24, y: 19.05), controlPoint2: CGPoint(x: 24, y: 20.03))
            bezier2Path.addCurve(to: CGPoint(x: 20.02, y: 25.52), controlPoint1: CGPoint(x: 24, y: 23.97), controlPoint2: CGPoint(x: 22.02, y: 25.52))
            bezier2Path.addCurve(to: CGPoint(x: 15.5, y: 25.52), controlPoint1: CGPoint(x: 18.02, y: 25.52), controlPoint2: CGPoint(x: 18.03, y: 25.52))
            bezier2Path.addCurve(to: CGPoint(x: 6.25, y: 18.25), controlPoint1: CGPoint(x: 12.03, y: 25.52), controlPoint2: CGPoint(x: 6.25, y: 18.25))
            bezier2Path.addCurve(to: CGPoint(x: 6, y: 16), controlPoint1: CGPoint(x: 5.75, y: 17.75), controlPoint2: CGPoint(x: 5.25, y: 16.75))
            bezier2Path.addCurve(to: CGPoint(x: 8.25, y: 16.25), controlPoint1: CGPoint(x: 6.75, y: 15.25), controlPoint2: CGPoint(x: 7.67, y: 15.84))
            bezier2Path.addLine(to: CGPoint(x: 11.5, y: 18.52))
            bezier2Path.close()
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 15.51, y: 8.47))
            bezier3Path.addCurve(to: CGPoint(x: 15.05, y: 4.45), controlPoint1: CGPoint(x: 16.29, y: 7.21), controlPoint2: CGPoint(x: 16.14, y: 5.54))
            bezier3Path.addCurve(to: CGPoint(x: 10.45, y: 4.45), controlPoint1: CGPoint(x: 13.78, y: 3.18), controlPoint2: CGPoint(x: 11.72, y: 3.18))
            bezier3Path.addCurve(to: CGPoint(x: 10.02, y: 8.52), controlPoint1: CGPoint(x: 9.35, y: 5.56), controlPoint2: CGPoint(x: 9.2, y: 7.26))
            unselectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.miterLimit = 10
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 11.5, y: 18.52))
            bezier4Path.addCurve(to: CGPoint(x: 11.5, y: 7), controlPoint1: CGPoint(x: 11.5, y: 18.52), controlPoint2: CGPoint(x: 11.5, y: 7.99))
            bezier4Path.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6), controlPoint2: CGPoint(x: 12.16, y: 5.5))
            bezier4Path.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 13.48, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6))
            bezier4Path.addCurve(to: CGPoint(x: 14, y: 14), controlPoint1: CGPoint(x: 14, y: 7.99), controlPoint2: CGPoint(x: 14, y: 13.5))
            bezier4Path.addCurve(to: CGPoint(x: 14.52, y: 15), controlPoint1: CGPoint(x: 14, y: 14.5), controlPoint2: CGPoint(x: 14, y: 15))
            bezier4Path.addCurve(to: CGPoint(x: 15, y: 14), controlPoint1: CGPoint(x: 15.05, y: 15), controlPoint2: CGPoint(x: 15, y: 14.5))
            bezier4Path.addCurve(to: CGPoint(x: 15, y: 13), controlPoint1: CGPoint(x: 15, y: 13.5), controlPoint2: CGPoint(x: 15, y: 14))
            bezier4Path.addCurve(to: CGPoint(x: 16.25, y: 11.5), controlPoint1: CGPoint(x: 15, y: 12), controlPoint2: CGPoint(x: 15.5, y: 11.5))
            bezier4Path.addCurve(to: CGPoint(x: 17.5, y: 13), controlPoint1: CGPoint(x: 17, y: 11.5), controlPoint2: CGPoint(x: 17.5, y: 12))
            bezier4Path.addLine(to: CGPoint(x: 17.5, y: 14))
            bezier4Path.addCurve(to: CGPoint(x: 18, y: 15), controlPoint1: CGPoint(x: 17.5, y: 14.48), controlPoint2: CGPoint(x: 17.5, y: 15))
            bezier4Path.addCurve(to: CGPoint(x: 18.51, y: 14), controlPoint1: CGPoint(x: 18.5, y: 15), controlPoint2: CGPoint(x: 18.51, y: 14.5))
            bezier4Path.addCurve(to: CGPoint(x: 18.51, y: 13.5), controlPoint1: CGPoint(x: 18.51, y: 13.5), controlPoint2: CGPoint(x: 18.51, y: 14.5))
            bezier4Path.addCurve(to: CGPoint(x: 19.75, y: 12), controlPoint1: CGPoint(x: 18.51, y: 12.5), controlPoint2: CGPoint(x: 19, y: 12))
            bezier4Path.addCurve(to: CGPoint(x: 21, y: 13.5), controlPoint1: CGPoint(x: 20.5, y: 12), controlPoint2: CGPoint(x: 21, y: 12.5))
            bezier4Path.addCurve(to: CGPoint(x: 21, y: 15), controlPoint1: CGPoint(x: 21, y: 14.5), controlPoint2: CGPoint(x: 21, y: 14.5))
            bezier4Path.addCurve(to: CGPoint(x: 21.5, y: 16), controlPoint1: CGPoint(x: 21, y: 15.5), controlPoint2: CGPoint(x: 21, y: 16))
            bezier4Path.addCurve(to: CGPoint(x: 22, y: 15), controlPoint1: CGPoint(x: 22, y: 16), controlPoint2: CGPoint(x: 22, y: 15.5))
            bezier4Path.addCurve(to: CGPoint(x: 22, y: 14.5), controlPoint1: CGPoint(x: 22, y: 14.5), controlPoint2: CGPoint(x: 22, y: 15.5))
            bezier4Path.addCurve(to: CGPoint(x: 23, y: 13), controlPoint1: CGPoint(x: 22, y: 13.5), controlPoint2: CGPoint(x: 22.22, y: 13))
            bezier4Path.addCurve(to: CGPoint(x: 24, y: 14.5), controlPoint1: CGPoint(x: 23.72, y: 13), controlPoint2: CGPoint(x: 24, y: 13.36))
            bezier4Path.addCurve(to: CGPoint(x: 24, y: 17.06), controlPoint1: CGPoint(x: 24, y: 14.87), controlPoint2: CGPoint(x: 24, y: 15.07))
            bezier4Path.addCurve(to: CGPoint(x: 24, y: 22), controlPoint1: CGPoint(x: 24, y: 19.05), controlPoint2: CGPoint(x: 24, y: 20.03))
            bezier4Path.addCurve(to: CGPoint(x: 20.02, y: 25.52), controlPoint1: CGPoint(x: 24, y: 23.97), controlPoint2: CGPoint(x: 22.02, y: 25.52))
            bezier4Path.addCurve(to: CGPoint(x: 15.5, y: 25.52), controlPoint1: CGPoint(x: 18.02, y: 25.52), controlPoint2: CGPoint(x: 18.03, y: 25.52))
            bezier4Path.addCurve(to: CGPoint(x: 6.25, y: 18.25), controlPoint1: CGPoint(x: 12.03, y: 25.52), controlPoint2: CGPoint(x: 6.25, y: 18.25))
            bezier4Path.addCurve(to: CGPoint(x: 6, y: 16), controlPoint1: CGPoint(x: 5.75, y: 17.75), controlPoint2: CGPoint(x: 5.25, y: 16.75))
            bezier4Path.addCurve(to: CGPoint(x: 8.25, y: 16.25), controlPoint1: CGPoint(x: 6.75, y: 15.25), controlPoint2: CGPoint(x: 7.68, y: 15.84))
            bezier4Path.addLine(to: CGPoint(x: 11.5, y: 18.52))
            bezier4Path.close()
            unselectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawInteractFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 15.51, y: 8.47))
            bezierPath.addCurve(to: CGPoint(x: 15.04, y: 4.45), controlPoint1: CGPoint(x: 16.29, y: 7.21), controlPoint2: CGPoint(x: 16.13, y: 5.54))
            bezierPath.addCurve(to: CGPoint(x: 10.45, y: 4.45), controlPoint1: CGPoint(x: 13.78, y: 3.18), controlPoint2: CGPoint(x: 11.72, y: 3.18))
            bezierPath.addCurve(to: CGPoint(x: 10.02, y: 8.52), controlPoint1: CGPoint(x: 9.34, y: 5.56), controlPoint2: CGPoint(x: 9.2, y: 7.26))
            selectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.miterLimit = 10
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 11.5, y: 18.52))
            bezier2Path.addCurve(to: CGPoint(x: 11.5, y: 7), controlPoint1: CGPoint(x: 11.5, y: 18.52), controlPoint2: CGPoint(x: 11.5, y: 7.99))
            bezier2Path.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6), controlPoint2: CGPoint(x: 12.16, y: 5.5))
            bezier2Path.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 13.48, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6))
            bezier2Path.addCurve(to: CGPoint(x: 14, y: 14), controlPoint1: CGPoint(x: 14, y: 7.99), controlPoint2: CGPoint(x: 14, y: 13.5))
            bezier2Path.addCurve(to: CGPoint(x: 14.52, y: 15), controlPoint1: CGPoint(x: 14, y: 14.5), controlPoint2: CGPoint(x: 14, y: 15))
            bezier2Path.addCurve(to: CGPoint(x: 15, y: 14), controlPoint1: CGPoint(x: 15.05, y: 15), controlPoint2: CGPoint(x: 15, y: 14.5))
            bezier2Path.addCurve(to: CGPoint(x: 15, y: 13), controlPoint1: CGPoint(x: 15, y: 13.5), controlPoint2: CGPoint(x: 15, y: 14))
            bezier2Path.addCurve(to: CGPoint(x: 16.25, y: 11.5), controlPoint1: CGPoint(x: 15, y: 12), controlPoint2: CGPoint(x: 15.5, y: 11.5))
            bezier2Path.addCurve(to: CGPoint(x: 17.5, y: 13), controlPoint1: CGPoint(x: 17, y: 11.5), controlPoint2: CGPoint(x: 17.5, y: 12))
            bezier2Path.addLine(to: CGPoint(x: 17.5, y: 14))
            bezier2Path.addCurve(to: CGPoint(x: 18, y: 15), controlPoint1: CGPoint(x: 17.5, y: 14.48), controlPoint2: CGPoint(x: 17.5, y: 15))
            bezier2Path.addCurve(to: CGPoint(x: 18.5, y: 14), controlPoint1: CGPoint(x: 18.5, y: 15), controlPoint2: CGPoint(x: 18.5, y: 14.5))
            bezier2Path.addCurve(to: CGPoint(x: 18.5, y: 13.5), controlPoint1: CGPoint(x: 18.5, y: 13.5), controlPoint2: CGPoint(x: 18.5, y: 14.5))
            bezier2Path.addCurve(to: CGPoint(x: 19.75, y: 12), controlPoint1: CGPoint(x: 18.5, y: 12.5), controlPoint2: CGPoint(x: 19, y: 12))
            bezier2Path.addCurve(to: CGPoint(x: 21, y: 13.5), controlPoint1: CGPoint(x: 20.5, y: 12), controlPoint2: CGPoint(x: 21, y: 12.5))
            bezier2Path.addCurve(to: CGPoint(x: 21, y: 15), controlPoint1: CGPoint(x: 21, y: 14.5), controlPoint2: CGPoint(x: 21, y: 14.5))
            bezier2Path.addCurve(to: CGPoint(x: 21.5, y: 16), controlPoint1: CGPoint(x: 21, y: 15.5), controlPoint2: CGPoint(x: 21, y: 16))
            bezier2Path.addCurve(to: CGPoint(x: 22, y: 15), controlPoint1: CGPoint(x: 22, y: 16), controlPoint2: CGPoint(x: 22, y: 15.5))
            bezier2Path.addCurve(to: CGPoint(x: 22, y: 14.5), controlPoint1: CGPoint(x: 22, y: 14.5), controlPoint2: CGPoint(x: 22, y: 15.5))
            bezier2Path.addCurve(to: CGPoint(x: 23, y: 13), controlPoint1: CGPoint(x: 22, y: 13.5), controlPoint2: CGPoint(x: 22.21, y: 13))
            bezier2Path.addCurve(to: CGPoint(x: 24, y: 14.5), controlPoint1: CGPoint(x: 23.71, y: 13), controlPoint2: CGPoint(x: 24, y: 13.36))
            bezier2Path.addCurve(to: CGPoint(x: 24, y: 17.06), controlPoint1: CGPoint(x: 24, y: 14.87), controlPoint2: CGPoint(x: 24, y: 15.07))
            bezier2Path.addCurve(to: CGPoint(x: 24, y: 22), controlPoint1: CGPoint(x: 24, y: 19.05), controlPoint2: CGPoint(x: 24, y: 20.03))
            bezier2Path.addCurve(to: CGPoint(x: 20.02, y: 25.52), controlPoint1: CGPoint(x: 24, y: 23.97), controlPoint2: CGPoint(x: 22.02, y: 25.52))
            bezier2Path.addCurve(to: CGPoint(x: 15.5, y: 25.52), controlPoint1: CGPoint(x: 18.02, y: 25.52), controlPoint2: CGPoint(x: 18.03, y: 25.52))
            bezier2Path.addCurve(to: CGPoint(x: 6.25, y: 18.25), controlPoint1: CGPoint(x: 12.03, y: 25.52), controlPoint2: CGPoint(x: 6.25, y: 18.25))
            bezier2Path.addCurve(to: CGPoint(x: 6, y: 16), controlPoint1: CGPoint(x: 5.75, y: 17.75), controlPoint2: CGPoint(x: 5.25, y: 16.75))
            bezier2Path.addCurve(to: CGPoint(x: 8.25, y: 16.25), controlPoint1: CGPoint(x: 6.75, y: 15.25), controlPoint2: CGPoint(x: 7.67, y: 15.84))
            bezier2Path.addLine(to: CGPoint(x: 11.5, y: 18.52))
            bezier2Path.close()
            selectedColor.setFill()
            bezier2Path.fill()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 15.51, y: 8.47))
            bezier3Path.addCurve(to: CGPoint(x: 15.05, y: 4.45), controlPoint1: CGPoint(x: 16.29, y: 7.21), controlPoint2: CGPoint(x: 16.14, y: 5.54))
            bezier3Path.addCurve(to: CGPoint(x: 10.45, y: 4.45), controlPoint1: CGPoint(x: 13.78, y: 3.18), controlPoint2: CGPoint(x: 11.72, y: 3.18))
            bezier3Path.addCurve(to: CGPoint(x: 10.02, y: 8.52), controlPoint1: CGPoint(x: 9.35, y: 5.56), controlPoint2: CGPoint(x: 9.2, y: 7.26))
            unselectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.miterLimit = 10
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 11.5, y: 18.52))
            bezier4Path.addCurve(to: CGPoint(x: 11.5, y: 7), controlPoint1: CGPoint(x: 11.5, y: 18.52), controlPoint2: CGPoint(x: 11.5, y: 7.99))
            bezier4Path.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6), controlPoint2: CGPoint(x: 12.16, y: 5.5))
            bezier4Path.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 13.48, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6))
            bezier4Path.addCurve(to: CGPoint(x: 14, y: 14), controlPoint1: CGPoint(x: 14, y: 7.99), controlPoint2: CGPoint(x: 14, y: 13.5))
            bezier4Path.addCurve(to: CGPoint(x: 14.52, y: 15), controlPoint1: CGPoint(x: 14, y: 14.5), controlPoint2: CGPoint(x: 14, y: 15))
            bezier4Path.addCurve(to: CGPoint(x: 15, y: 14), controlPoint1: CGPoint(x: 15.05, y: 15), controlPoint2: CGPoint(x: 15, y: 14.5))
            bezier4Path.addCurve(to: CGPoint(x: 15, y: 13), controlPoint1: CGPoint(x: 15, y: 13.5), controlPoint2: CGPoint(x: 15, y: 14))
            bezier4Path.addCurve(to: CGPoint(x: 16.25, y: 11.5), controlPoint1: CGPoint(x: 15, y: 12), controlPoint2: CGPoint(x: 15.5, y: 11.5))
            bezier4Path.addCurve(to: CGPoint(x: 17.5, y: 13), controlPoint1: CGPoint(x: 17, y: 11.5), controlPoint2: CGPoint(x: 17.5, y: 12))
            bezier4Path.addLine(to: CGPoint(x: 17.5, y: 14))
            bezier4Path.addCurve(to: CGPoint(x: 18, y: 15), controlPoint1: CGPoint(x: 17.5, y: 14.48), controlPoint2: CGPoint(x: 17.5, y: 15))
            bezier4Path.addCurve(to: CGPoint(x: 18.51, y: 14), controlPoint1: CGPoint(x: 18.5, y: 15), controlPoint2: CGPoint(x: 18.51, y: 14.5))
            bezier4Path.addCurve(to: CGPoint(x: 18.51, y: 13.5), controlPoint1: CGPoint(x: 18.51, y: 13.5), controlPoint2: CGPoint(x: 18.51, y: 14.5))
            bezier4Path.addCurve(to: CGPoint(x: 19.75, y: 12), controlPoint1: CGPoint(x: 18.51, y: 12.5), controlPoint2: CGPoint(x: 19, y: 12))
            bezier4Path.addCurve(to: CGPoint(x: 21, y: 13.5), controlPoint1: CGPoint(x: 20.5, y: 12), controlPoint2: CGPoint(x: 21, y: 12.5))
            bezier4Path.addCurve(to: CGPoint(x: 21, y: 15), controlPoint1: CGPoint(x: 21, y: 14.5), controlPoint2: CGPoint(x: 21, y: 14.5))
            bezier4Path.addCurve(to: CGPoint(x: 21.5, y: 16), controlPoint1: CGPoint(x: 21, y: 15.5), controlPoint2: CGPoint(x: 21, y: 16))
            bezier4Path.addCurve(to: CGPoint(x: 22, y: 15), controlPoint1: CGPoint(x: 22, y: 16), controlPoint2: CGPoint(x: 22, y: 15.5))
            bezier4Path.addCurve(to: CGPoint(x: 22, y: 14.5), controlPoint1: CGPoint(x: 22, y: 14.5), controlPoint2: CGPoint(x: 22, y: 15.5))
            bezier4Path.addCurve(to: CGPoint(x: 23, y: 13), controlPoint1: CGPoint(x: 22, y: 13.5), controlPoint2: CGPoint(x: 22.22, y: 13))
            bezier4Path.addCurve(to: CGPoint(x: 24, y: 14.5), controlPoint1: CGPoint(x: 23.72, y: 13), controlPoint2: CGPoint(x: 24, y: 13.36))
            bezier4Path.addCurve(to: CGPoint(x: 24, y: 17.06), controlPoint1: CGPoint(x: 24, y: 14.87), controlPoint2: CGPoint(x: 24, y: 15.07))
            bezier4Path.addCurve(to: CGPoint(x: 24, y: 22), controlPoint1: CGPoint(x: 24, y: 19.05), controlPoint2: CGPoint(x: 24, y: 20.03))
            bezier4Path.addCurve(to: CGPoint(x: 20.02, y: 25.52), controlPoint1: CGPoint(x: 24, y: 23.97), controlPoint2: CGPoint(x: 22.02, y: 25.52))
            bezier4Path.addCurve(to: CGPoint(x: 15.5, y: 25.52), controlPoint1: CGPoint(x: 18.02, y: 25.52), controlPoint2: CGPoint(x: 18.03, y: 25.52))
            bezier4Path.addCurve(to: CGPoint(x: 6.25, y: 18.25), controlPoint1: CGPoint(x: 12.03, y: 25.52), controlPoint2: CGPoint(x: 6.25, y: 18.25))
            bezier4Path.addCurve(to: CGPoint(x: 6, y: 16), controlPoint1: CGPoint(x: 5.75, y: 17.75), controlPoint2: CGPoint(x: 5.25, y: 16.75))
            bezier4Path.addCurve(to: CGPoint(x: 8.25, y: 16.25), controlPoint1: CGPoint(x: 6.75, y: 15.25), controlPoint2: CGPoint(x: 7.68, y: 15.84))
            bezier4Path.addLine(to: CGPoint(x: 11.5, y: 18.52))
            bezier4Path.close()
            unselectedColor.setFill()
            bezier4Path.fill()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawScoreUnfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 9, y: 15))
            bezierPath.addCurve(to: CGPoint(x: 15, y: 21), controlPoint1: CGPoint(x: 9, y: 18.31), controlPoint2: CGPoint(x: 11.69, y: 21))
            bezierPath.addCurve(to: CGPoint(x: 21, y: 15), controlPoint1: CGPoint(x: 18.31, y: 21), controlPoint2: CGPoint(x: 21, y: 18.31))
            bezierPath.addCurve(to: CGPoint(x: 15, y: 9), controlPoint1: CGPoint(x: 21, y: 11.69), controlPoint2: CGPoint(x: 18.31, y: 9))
            selectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 15, y: 5))
            bezier2Path.addCurve(to: CGPoint(x: 25, y: 15), controlPoint1: CGPoint(x: 20.52, y: 5), controlPoint2: CGPoint(x: 25, y: 9.48))
            bezier2Path.addCurve(to: CGPoint(x: 15, y: 25), controlPoint1: CGPoint(x: 25, y: 20.52), controlPoint2: CGPoint(x: 20.52, y: 25))
            bezier2Path.addCurve(to: CGPoint(x: 5, y: 15), controlPoint1: CGPoint(x: 9.48, y: 25), controlPoint2: CGPoint(x: 5, y: 20.52))
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 15, y: 5))
            bezier3Path.addCurve(to: CGPoint(x: 13, y: 7), controlPoint1: CGPoint(x: 13.9, y: 5), controlPoint2: CGPoint(x: 13, y: 5.9))
            bezier3Path.addCurve(to: CGPoint(x: 15, y: 9), controlPoint1: CGPoint(x: 13, y: 8.1), controlPoint2: CGPoint(x: 13.9, y: 9))
            selectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 9, y: 15))
            bezier4Path.addCurve(to: CGPoint(x: 7, y: 13), controlPoint1: CGPoint(x: 9, y: 13.9), controlPoint2: CGPoint(x: 8.1, y: 13))
            bezier4Path.addCurve(to: CGPoint(x: 5, y: 15), controlPoint1: CGPoint(x: 5.9, y: 13), controlPoint2: CGPoint(x: 5, y: 13.9))
            selectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 13.06, y: 7.24))
            bezier5Path.addCurve(to: CGPoint(x: 7.25, y: 13.02), controlPoint1: CGPoint(x: 10.21, y: 7.95), controlPoint2: CGPoint(x: 7.97, y: 10.18))
            selectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 14.5, y: 12.5))
            bezier6Path.addLine(to: CGPoint(x: 14.5, y: 16.5))
            selectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.lineCapStyle = .square
            bezier6Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 12.5, y: 14.5))
            bezier7Path.addLine(to: CGPoint(x: 16.5, y: 14.5))
            selectedColor.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.lineCapStyle = .square
            bezier7Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 9, y: 15))
            bezier8Path.addCurve(to: CGPoint(x: 15, y: 21), controlPoint1: CGPoint(x: 9, y: 18.31), controlPoint2: CGPoint(x: 11.69, y: 21))
            bezier8Path.addCurve(to: CGPoint(x: 21, y: 15), controlPoint1: CGPoint(x: 18.31, y: 21), controlPoint2: CGPoint(x: 21, y: 18.31))
            bezier8Path.addCurve(to: CGPoint(x: 15, y: 9), controlPoint1: CGPoint(x: 21, y: 11.69), controlPoint2: CGPoint(x: 18.31, y: 9))
            unselectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 15, y: 5))
            bezier9Path.addCurve(to: CGPoint(x: 25, y: 15), controlPoint1: CGPoint(x: 20.52, y: 5), controlPoint2: CGPoint(x: 25, y: 9.48))
            bezier9Path.addCurve(to: CGPoint(x: 15, y: 25), controlPoint1: CGPoint(x: 25, y: 20.52), controlPoint2: CGPoint(x: 20.52, y: 25))
            bezier9Path.addCurve(to: CGPoint(x: 5, y: 15), controlPoint1: CGPoint(x: 9.48, y: 25), controlPoint2: CGPoint(x: 5, y: 20.52))
            unselectedColor.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 15, y: 5))
            bezier10Path.addCurve(to: CGPoint(x: 13, y: 7), controlPoint1: CGPoint(x: 13.9, y: 5), controlPoint2: CGPoint(x: 13, y: 5.9))
            bezier10Path.addCurve(to: CGPoint(x: 15, y: 9), controlPoint1: CGPoint(x: 13, y: 8.1), controlPoint2: CGPoint(x: 13.9, y: 9))
            unselectedColor.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 9, y: 15))
            bezier11Path.addCurve(to: CGPoint(x: 7, y: 13), controlPoint1: CGPoint(x: 9, y: 13.9), controlPoint2: CGPoint(x: 8.1, y: 13))
            bezier11Path.addCurve(to: CGPoint(x: 5, y: 15), controlPoint1: CGPoint(x: 5.9, y: 13), controlPoint2: CGPoint(x: 5, y: 13.9))
            unselectedColor.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.stroke()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 13.06, y: 7.24))
            bezier12Path.addCurve(to: CGPoint(x: 7.25, y: 13.02), controlPoint1: CGPoint(x: 10.21, y: 7.95), controlPoint2: CGPoint(x: 7.97, y: 10.18))
            unselectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.stroke()


            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 14.5, y: 12.5))
            bezier13Path.addLine(to: CGPoint(x: 14.5, y: 16.5))
            unselectedColor.setStroke()
            bezier13Path.lineWidth = 1
            bezier13Path.lineCapStyle = .square
            bezier13Path.stroke()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 12.5, y: 14.5))
            bezier14Path.addLine(to: CGPoint(x: 16.5, y: 14.5))
            unselectedColor.setStroke()
            bezier14Path.lineWidth = 1
            bezier14Path.lineCapStyle = .square
            bezier14Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawScoreFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 9.25, y: 15))
            bezier8Path.addCurve(to: CGPoint(x: 15, y: 20.75), controlPoint1: CGPoint(x: 9.25, y: 18.18), controlPoint2: CGPoint(x: 11.82, y: 20.75))
            bezier8Path.addCurve(to: CGPoint(x: 20.75, y: 15), controlPoint1: CGPoint(x: 18.18, y: 20.75), controlPoint2: CGPoint(x: 20.75, y: 18.18))
            bezier8Path.addCurve(to: CGPoint(x: 15, y: 9.25), controlPoint1: CGPoint(x: 20.75, y: 11.82), controlPoint2: CGPoint(x: 18.18, y: 9.25))
            bezier8Path.addCurve(to: CGPoint(x: 12.75, y: 7), controlPoint1: CGPoint(x: 13.76, y: 9.25), controlPoint2: CGPoint(x: 12.75, y: 8.24))
            bezier8Path.addCurve(to: CGPoint(x: 15, y: 4.75), controlPoint1: CGPoint(x: 12.75, y: 5.76), controlPoint2: CGPoint(x: 13.76, y: 4.75))
            bezier8Path.addCurve(to: CGPoint(x: 25.25, y: 15), controlPoint1: CGPoint(x: 20.66, y: 4.75), controlPoint2: CGPoint(x: 25.25, y: 9.34))
            bezier8Path.addCurve(to: CGPoint(x: 15, y: 25.25), controlPoint1: CGPoint(x: 25.25, y: 20.66), controlPoint2: CGPoint(x: 20.66, y: 25.25))
            bezier8Path.addCurve(to: CGPoint(x: 4.75, y: 15), controlPoint1: CGPoint(x: 9.34, y: 25.25), controlPoint2: CGPoint(x: 4.75, y: 20.66))
            bezier8Path.addCurve(to: CGPoint(x: 7, y: 12.75), controlPoint1: CGPoint(x: 4.75, y: 13.76), controlPoint2: CGPoint(x: 5.76, y: 12.75))
            bezier8Path.addCurve(to: CGPoint(x: 9.25, y: 15), controlPoint1: CGPoint(x: 8.24, y: 12.75), controlPoint2: CGPoint(x: 9.25, y: 13.76))
            bezier8Path.close()
            selectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.stroke()


            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 14, y: 12))
            bezierPath.addLine(to: CGPoint(x: 14, y: 14))
            bezierPath.addLine(to: CGPoint(x: 12.94, y: 9.32))
            bezierPath.addLine(to: CGPoint(x: 12.94, y: 6.75))
            bezierPath.addLine(to: CGPoint(x: 13.28, y: 8.47))
            bezierPath.addCurve(to: CGPoint(x: 15, y: 9.32), controlPoint1: CGPoint(x: 13.96, y: 9.19), controlPoint2: CGPoint(x: 14.17, y: 9.32))
            bezierPath.addLine(to: CGPoint(x: 14, y: 12))
            bezierPath.close()
            bezierPath.move(to: CGPoint(x: 12, y: 14))
            bezierPath.addLine(to: CGPoint(x: 12, y: 15))
            bezierPath.addLine(to: CGPoint(x: 14, y: 15))
            bezierPath.addLine(to: CGPoint(x: 14, y: 17))
            bezierPath.addLine(to: CGPoint(x: 15, y: 17))
            bezierPath.addLine(to: CGPoint(x: 15, y: 15))
            bezierPath.addLine(to: CGPoint(x: 17, y: 15))
            bezierPath.addLine(to: CGPoint(x: 17, y: 14))
            bezierPath.addCurve(to: CGPoint(x: 15, y: 14), controlPoint1: CGPoint(x: 17, y: 14), controlPoint2: CGPoint(x: 15.6, y: 14))
            bezierPath.addLine(to: CGPoint(x: 15, y: 12))
            bezierPath.addLine(to: CGPoint(x: 14, y: 12))
            bezierPath.addLine(to: CGPoint(x: 15, y: 9.32))
            bezierPath.addCurve(to: CGPoint(x: 20.8, y: 15), controlPoint1: CGPoint(x: 18.59, y: 9.32), controlPoint2: CGPoint(x: 20.8, y: 11.41))
            bezierPath.addCurve(to: CGPoint(x: 15, y: 20.89), controlPoint1: CGPoint(x: 20.8, y: 18.59), controlPoint2: CGPoint(x: 18.59, y: 20.89))
            bezierPath.addCurve(to: CGPoint(x: 9.35, y: 15), controlPoint1: CGPoint(x: 11.41, y: 20.89), controlPoint2: CGPoint(x: 9.35, y: 18.59))
            bezierPath.addLine(to: CGPoint(x: 12, y: 14))
            bezierPath.close()
            bezierPath.move(to: CGPoint(x: 9.35, y: 15))
            bezierPath.addCurve(to: CGPoint(x: 8.35, y: 13.31), controlPoint1: CGPoint(x: 9.35, y: 14.58), controlPoint2: CGPoint(x: 8.9, y: 13.73))
            bezierPath.addCurve(to: CGPoint(x: 6.76, y: 12.9), controlPoint1: CGPoint(x: 7.81, y: 12.9), controlPoint2: CGPoint(x: 7.17, y: 12.9))
            bezierPath.addLine(to: CGPoint(x: 9.35, y: 12))
            bezierPath.addLine(to: CGPoint(x: 12.94, y: 9.32))
            bezierPath.addLine(to: CGPoint(x: 14, y: 14))
            bezierPath.addLine(to: CGPoint(x: 12, y: 14))
            bezierPath.addLine(to: CGPoint(x: 9.35, y: 15))
            bezierPath.close()
            bezierPath.move(to: CGPoint(x: 12.94, y: 9.32))
            bezierPath.addLine(to: CGPoint(x: 9.35, y: 12))
            bezierPath.addLine(to: CGPoint(x: 6.76, y: 12.9))
            bezierPath.addCurve(to: CGPoint(x: 12.94, y: 6.75), controlPoint1: CGPoint(x: 7.53, y: 9.88), controlPoint2: CGPoint(x: 9.92, y: 7.5))
            bezierPath.addLine(to: CGPoint(x: 12.94, y: 9.32))
            bezierPath.close()
            selectedColor.setFill()
            bezierPath.fill()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 9.25, y: 15))
            bezier5Path.addCurve(to: CGPoint(x: 15, y: 20.75), controlPoint1: CGPoint(x: 9.25, y: 18.18), controlPoint2: CGPoint(x: 11.82, y: 20.75))
            bezier5Path.addCurve(to: CGPoint(x: 20.75, y: 15), controlPoint1: CGPoint(x: 18.18, y: 20.75), controlPoint2: CGPoint(x: 20.75, y: 18.18))
            bezier5Path.addCurve(to: CGPoint(x: 15, y: 9.25), controlPoint1: CGPoint(x: 20.75, y: 11.82), controlPoint2: CGPoint(x: 18.18, y: 9.25))
            bezier5Path.addCurve(to: CGPoint(x: 12.75, y: 7), controlPoint1: CGPoint(x: 13.76, y: 9.25), controlPoint2: CGPoint(x: 12.75, y: 8.24))
            bezier5Path.addCurve(to: CGPoint(x: 15, y: 4.75), controlPoint1: CGPoint(x: 12.75, y: 5.76), controlPoint2: CGPoint(x: 13.76, y: 4.75))
            bezier5Path.addCurve(to: CGPoint(x: 25.25, y: 15), controlPoint1: CGPoint(x: 20.66, y: 4.75), controlPoint2: CGPoint(x: 25.25, y: 9.34))
            bezier5Path.addCurve(to: CGPoint(x: 15, y: 25.25), controlPoint1: CGPoint(x: 25.25, y: 20.66), controlPoint2: CGPoint(x: 20.66, y: 25.25))
            bezier5Path.addCurve(to: CGPoint(x: 4.75, y: 15), controlPoint1: CGPoint(x: 9.34, y: 25.25), controlPoint2: CGPoint(x: 4.75, y: 20.66))
            bezier5Path.addCurve(to: CGPoint(x: 7, y: 12.75), controlPoint1: CGPoint(x: 4.75, y: 13.76), controlPoint2: CGPoint(x: 5.76, y: 12.75))
            bezier5Path.addCurve(to: CGPoint(x: 9.25, y: 15), controlPoint1: CGPoint(x: 8.24, y: 12.75), controlPoint2: CGPoint(x: 9.25, y: 13.76))
            bezier5Path.close()
            unselectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 14, y: 12))
            bezier10Path.addLine(to: CGPoint(x: 14, y: 14))
            bezier10Path.addLine(to: CGPoint(x: 12.94, y: 9.32))
            bezier10Path.addLine(to: CGPoint(x: 12.94, y: 6.75))
            bezier10Path.addLine(to: CGPoint(x: 13.28, y: 8.47))
            bezier10Path.addCurve(to: CGPoint(x: 15, y: 9.32), controlPoint1: CGPoint(x: 13.96, y: 9.19), controlPoint2: CGPoint(x: 14.17, y: 9.32))
            bezier10Path.addLine(to: CGPoint(x: 14, y: 12))
            bezier10Path.close()
            bezier10Path.move(to: CGPoint(x: 12, y: 14))
            bezier10Path.addLine(to: CGPoint(x: 12, y: 15))
            bezier10Path.addLine(to: CGPoint(x: 14, y: 15))
            bezier10Path.addLine(to: CGPoint(x: 14, y: 17))
            bezier10Path.addLine(to: CGPoint(x: 15, y: 17))
            bezier10Path.addLine(to: CGPoint(x: 15, y: 15))
            bezier10Path.addLine(to: CGPoint(x: 17, y: 15))
            bezier10Path.addLine(to: CGPoint(x: 17, y: 14))
            bezier10Path.addCurve(to: CGPoint(x: 15, y: 14), controlPoint1: CGPoint(x: 17, y: 14), controlPoint2: CGPoint(x: 15.6, y: 14))
            bezier10Path.addLine(to: CGPoint(x: 15, y: 12))
            bezier10Path.addLine(to: CGPoint(x: 14, y: 12))
            bezier10Path.addLine(to: CGPoint(x: 15, y: 9.32))
            bezier10Path.addCurve(to: CGPoint(x: 20.8, y: 15), controlPoint1: CGPoint(x: 18.59, y: 9.32), controlPoint2: CGPoint(x: 20.8, y: 11.41))
            bezier10Path.addCurve(to: CGPoint(x: 15, y: 20.89), controlPoint1: CGPoint(x: 20.8, y: 18.59), controlPoint2: CGPoint(x: 18.59, y: 20.89))
            bezier10Path.addCurve(to: CGPoint(x: 9.35, y: 15), controlPoint1: CGPoint(x: 11.41, y: 20.89), controlPoint2: CGPoint(x: 9.35, y: 18.59))
            bezier10Path.addLine(to: CGPoint(x: 12, y: 14))
            bezier10Path.close()
            bezier10Path.move(to: CGPoint(x: 9.35, y: 15))
            bezier10Path.addCurve(to: CGPoint(x: 8.35, y: 13.31), controlPoint1: CGPoint(x: 9.35, y: 14.58), controlPoint2: CGPoint(x: 8.9, y: 13.73))
            bezier10Path.addCurve(to: CGPoint(x: 6.76, y: 12.9), controlPoint1: CGPoint(x: 7.81, y: 12.9), controlPoint2: CGPoint(x: 7.17, y: 12.9))
            bezier10Path.addLine(to: CGPoint(x: 9.35, y: 12))
            bezier10Path.addLine(to: CGPoint(x: 12.94, y: 9.32))
            bezier10Path.addLine(to: CGPoint(x: 14, y: 14))
            bezier10Path.addLine(to: CGPoint(x: 12, y: 14))
            bezier10Path.addLine(to: CGPoint(x: 9.35, y: 15))
            bezier10Path.close()
            bezier10Path.move(to: CGPoint(x: 12.94, y: 9.32))
            bezier10Path.addLine(to: CGPoint(x: 9.35, y: 12))
            bezier10Path.addLine(to: CGPoint(x: 6.76, y: 12.9))
            bezier10Path.addCurve(to: CGPoint(x: 12.94, y: 6.75), controlPoint1: CGPoint(x: 7.53, y: 9.88), controlPoint2: CGPoint(x: 9.92, y: 7.5))
            bezier10Path.addLine(to: CGPoint(x: 12.94, y: 9.32))
            bezier10Path.close()
            unselectedColor.setFill()
            bezier10Path.fill()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawStyeUnfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Group 3
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip
            let clipPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 5.5, width: 14, height: 14))
            clipPath.addClip()


            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 5.5, width: 14, height: 14))
            selectedColor.setStroke()
            ovalPath.lineWidth = 2
            ovalPath.stroke()


            context.endTransparencyLayer()
            context.restoreGState()


            //// Group 4
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 2
            let clip2Path = UIBezierPath(ovalIn: CGRect(x: 12, y: 7.5, width: 10, height: 10))
            clip2Path.addClip()


            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalIn: CGRect(x: 12, y: 7.5, width: 10, height: 10))
            selectedColor.setStroke()
            oval3Path.lineWidth = 2
            oval3Path.stroke()


            context.endTransparencyLayer()
            context.restoreGState()


            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 5.5, y: 6))
            bezierPath.addLine(to: CGPoint(x: 7.5, y: 6))
            selectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.lineCapStyle = .square
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 6.5, y: 6))
            bezier2Path.addLine(to: CGPoint(x: 6.5, y: 18))
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.lineCapStyle = .square
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 5.5, y: 19))
            bezier3Path.addLine(to: CGPoint(x: 7.5, y: 19))
            selectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.lineCapStyle = .square
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 10.5, y: 24))
            bezier4Path.addLine(to: CGPoint(x: 10.5, y: 22))
            selectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.lineCapStyle = .square
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 10.5, y: 23))
            bezier5Path.addLine(to: CGPoint(x: 23.5, y: 23))
            selectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.lineCapStyle = .square
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 23.5, y: 24))
            bezier6Path.addLine(to: CGPoint(x: 23.5, y: 22))
            selectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.lineCapStyle = .square
            bezier6Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Group
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 3
            let clip3Path = UIBezierPath(ovalIn: CGRect(x: 10, y: 5.5, width: 14, height: 14))
            clip3Path.addClip()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 10, y: 5.5, width: 14, height: 14))
            unselectedColor.setStroke()
            oval2Path.lineWidth = 2
            oval2Path.stroke()


            context.endTransparencyLayer()
            context.restoreGState()


            //// Group 2
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 4
            let clip4Path = UIBezierPath(ovalIn: CGRect(x: 12, y: 7.5, width: 10, height: 10))
            clip4Path.addClip()


            //// Oval 4 Drawing
            let oval4Path = UIBezierPath(ovalIn: CGRect(x: 12, y: 7.5, width: 10, height: 10))
            unselectedColor.setStroke()
            oval4Path.lineWidth = 2
            oval4Path.stroke()


            context.endTransparencyLayer()
            context.restoreGState()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 5.5, y: 6))
            bezier7Path.addLine(to: CGPoint(x: 7.5, y: 6))
            unselectedColor.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.lineCapStyle = .square
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 6.5, y: 6))
            bezier8Path.addLine(to: CGPoint(x: 6.5, y: 18))
            unselectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.lineCapStyle = .square
            bezier8Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 5.5, y: 19))
            bezier9Path.addLine(to: CGPoint(x: 7.5, y: 19))
            unselectedColor.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.lineCapStyle = .square
            bezier9Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 10.5, y: 24))
            bezier10Path.addLine(to: CGPoint(x: 10.5, y: 22))
            unselectedColor.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.lineCapStyle = .square
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 10.5, y: 23))
            bezier11Path.addLine(to: CGPoint(x: 23.5, y: 23))
            unselectedColor.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.lineCapStyle = .square
            bezier11Path.stroke()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 23.5, y: 24))
            bezier12Path.addLine(to: CGPoint(x: 23.5, y: 22))
            unselectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.lineCapStyle = .square
            bezier12Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawStyleFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Group 3
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip
            let clipPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 5.5, width: 14, height: 14))
            clipPath.addClip()


            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 5.5, width: 14, height: 14))
            selectedColor.setStroke()
            ovalPath.lineWidth = 2
            ovalPath.stroke()


            context.endTransparencyLayer()
            context.restoreGState()


            //// Group 6
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 4
            let clip4Path = UIBezierPath(ovalIn: CGRect(x: 12, y: 7.5, width: 10, height: 10))
            clip4Path.addClip()


            //// Oval 5 Drawing
            let oval5Path = UIBezierPath(ovalIn: CGRect(x: 12, y: 7.5, width: 10, height: 10))
            selectedColor.setFill()
            oval5Path.fill()
            selectedColor.setStroke()
            oval5Path.lineWidth = 2
            oval5Path.stroke()


            context.endTransparencyLayer()
            context.restoreGState()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 5.5, y: 6))
            bezier2Path.addLine(to: CGPoint(x: 7.5, y: 6))
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.lineCapStyle = .square
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 6.5, y: 6))
            bezier3Path.addLine(to: CGPoint(x: 6.5, y: 18))
            selectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.lineCapStyle = .square
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 5.5, y: 19))
            bezier4Path.addLine(to: CGPoint(x: 7.5, y: 19))
            selectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.lineCapStyle = .square
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 10.5, y: 24))
            bezier5Path.addLine(to: CGPoint(x: 10.5, y: 22))
            selectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.lineCapStyle = .square
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 10.5, y: 23))
            bezier6Path.addLine(to: CGPoint(x: 23.5, y: 23))
            selectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.lineCapStyle = .square
            bezier6Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 23.5, y: 24))
            bezier7Path.addLine(to: CGPoint(x: 23.5, y: 22))
            selectedColor.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.lineCapStyle = .square
            bezier7Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Group
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 2
            let clip2Path = UIBezierPath(ovalIn: CGRect(x: 10, y: 5.5, width: 14, height: 14))
            clip2Path.addClip()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 10, y: 5.5, width: 14, height: 14))
            unselectedColor.setStroke()
            oval2Path.lineWidth = 2
            oval2Path.stroke()


            context.endTransparencyLayer()
            context.restoreGState()


            //// Group 2
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 3
            let clip3Path = UIBezierPath(ovalIn: CGRect(x: 12, y: 7.5, width: 10, height: 10))
            clip3Path.addClip()


            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalIn: CGRect(x: 12, y: 7.5, width: 10, height: 10))
            unselectedColor.setFill()
            oval3Path.fill()
            unselectedColor.setStroke()
            oval3Path.lineWidth = 2
            oval3Path.stroke()


            context.endTransparencyLayer()
            context.restoreGState()


            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 5.5, y: 6))
            bezierPath.addLine(to: CGPoint(x: 7.5, y: 6))
            unselectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.lineCapStyle = .square
            bezierPath.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 6.5, y: 6))
            bezier8Path.addLine(to: CGPoint(x: 6.5, y: 18))
            unselectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.lineCapStyle = .square
            bezier8Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 5.5, y: 19))
            bezier9Path.addLine(to: CGPoint(x: 7.5, y: 19))
            unselectedColor.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.lineCapStyle = .square
            bezier9Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 10.5, y: 24))
            bezier10Path.addLine(to: CGPoint(x: 10.5, y: 22))
            unselectedColor.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.lineCapStyle = .square
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 10.5, y: 23))
            bezier11Path.addLine(to: CGPoint(x: 23.5, y: 23))
            unselectedColor.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.lineCapStyle = .square
            bezier11Path.stroke()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 23.5, y: 24))
            bezier12Path.addLine(to: CGPoint(x: 23.5, y: 22))
            unselectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.lineCapStyle = .square
            bezier12Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawMaterialUnfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        //// selectedGroup
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 10))
        bezierPath.addLine(to: CGPoint(x: 25.5, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 20.06, y: 14), controlPoint1: CGPoint(x: 25.5, y: 12), controlPoint2: CGPoint(x: 23.08, y: 14))
        bezierPath.addLine(to: CGPoint(x: 10, y: 14))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        bezierPath.close()
        selectedColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 6, y: 10.5))
        bezier2Path.addLine(to: CGPoint(x: 9.92, y: 10.5))
        bezier2Path.addLine(to: CGPoint(x: 9.92, y: 13))
        bezier2Path.addCurve(to: CGPoint(x: 8.94, y: 13), controlPoint1: CGPoint(x: 9.92, y: 13), controlPoint2: CGPoint(x: 10.41, y: 13))
        bezier2Path.addCurve(to: CGPoint(x: 6, y: 10.5), controlPoint1: CGPoint(x: 7.47, y: 13), controlPoint2: CGPoint(x: 6, y: 11.75))
        bezier2Path.close()
        selectedColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 13, y: 15))
        bezier3Path.addCurve(to: CGPoint(x: 11, y: 17.5), controlPoint1: CGPoint(x: 13.06, y: 17.04), controlPoint2: CGPoint(x: 11.5, y: 17.5))
        bezier3Path.addCurve(to: CGPoint(x: 10.5, y: 17.5), controlPoint1: CGPoint(x: 10.5, y: 17.5), controlPoint2: CGPoint(x: 11, y: 17.5))
        bezier3Path.addCurve(to: CGPoint(x: 9, y: 19), controlPoint1: CGPoint(x: 10, y: 17.5), controlPoint2: CGPoint(x: 9, y: 18))
        bezier3Path.addCurve(to: CGPoint(x: 9, y: 20.5), controlPoint1: CGPoint(x: 9, y: 20), controlPoint2: CGPoint(x: 9, y: 20.5))
        bezier3Path.addLine(to: CGPoint(x: 14, y: 20.5))
        bezier3Path.addCurve(to: CGPoint(x: 16.5, y: 19.5), controlPoint1: CGPoint(x: 14, y: 20.5), controlPoint2: CGPoint(x: 14.5, y: 19.5))
        bezier3Path.addCurve(to: CGPoint(x: 19, y: 20.5), controlPoint1: CGPoint(x: 18.5, y: 19.5), controlPoint2: CGPoint(x: 19, y: 20.5))
        bezier3Path.addLine(to: CGPoint(x: 23, y: 20.5))
        bezier3Path.addCurve(to: CGPoint(x: 23, y: 19), controlPoint1: CGPoint(x: 23, y: 20.5), controlPoint2: CGPoint(x: 23, y: 20))
        bezier3Path.addCurve(to: CGPoint(x: 21.5, y: 17.5), controlPoint1: CGPoint(x: 23, y: 18), controlPoint2: CGPoint(x: 21.92, y: 17.52))
        bezier3Path.addCurve(to: CGPoint(x: 21, y: 17.5), controlPoint1: CGPoint(x: 21.09, y: 17.52), controlPoint2: CGPoint(x: 21.5, y: 17.5))
        bezier3Path.addCurve(to: CGPoint(x: 19, y: 15), controlPoint1: CGPoint(x: 20.5, y: 17.5), controlPoint2: CGPoint(x: 19, y: 16.99))
        selectedColor.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()




        if (unselected) {
            //// unselectedGroup
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 10, y: 10))
            bezier4Path.addLine(to: CGPoint(x: 25.5, y: 10))
            bezier4Path.addCurve(to: CGPoint(x: 20.06, y: 14), controlPoint1: CGPoint(x: 25.5, y: 12), controlPoint2: CGPoint(x: 23.08, y: 14))
            bezier4Path.addLine(to: CGPoint(x: 10, y: 14))
            bezier4Path.addLine(to: CGPoint(x: 10, y: 10))
            bezier4Path.close()
            unselectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 6, y: 10.5))
            bezier5Path.addLine(to: CGPoint(x: 9.92, y: 10.5))
            bezier5Path.addLine(to: CGPoint(x: 9.92, y: 13))
            bezier5Path.addCurve(to: CGPoint(x: 8.94, y: 13), controlPoint1: CGPoint(x: 9.92, y: 13), controlPoint2: CGPoint(x: 10.41, y: 13))
            bezier5Path.addCurve(to: CGPoint(x: 6, y: 10.5), controlPoint1: CGPoint(x: 7.47, y: 13), controlPoint2: CGPoint(x: 6, y: 11.75))
            bezier5Path.close()
            unselectedColor.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 13, y: 15))
            bezier6Path.addCurve(to: CGPoint(x: 11, y: 17.5), controlPoint1: CGPoint(x: 13.06, y: 17.04), controlPoint2: CGPoint(x: 11.5, y: 17.5))
            bezier6Path.addCurve(to: CGPoint(x: 10.5, y: 17.5), controlPoint1: CGPoint(x: 10.5, y: 17.5), controlPoint2: CGPoint(x: 11, y: 17.5))
            bezier6Path.addCurve(to: CGPoint(x: 9, y: 19), controlPoint1: CGPoint(x: 10, y: 17.5), controlPoint2: CGPoint(x: 9, y: 18))
            bezier6Path.addCurve(to: CGPoint(x: 9, y: 20.5), controlPoint1: CGPoint(x: 9, y: 20), controlPoint2: CGPoint(x: 9, y: 20.5))
            bezier6Path.addLine(to: CGPoint(x: 14, y: 20.5))
            bezier6Path.addCurve(to: CGPoint(x: 16.5, y: 19.5), controlPoint1: CGPoint(x: 14, y: 20.5), controlPoint2: CGPoint(x: 14.5, y: 19.5))
            bezier6Path.addCurve(to: CGPoint(x: 19, y: 20.5), controlPoint1: CGPoint(x: 18.5, y: 19.5), controlPoint2: CGPoint(x: 19, y: 20.5))
            bezier6Path.addLine(to: CGPoint(x: 23, y: 20.5))
            bezier6Path.addCurve(to: CGPoint(x: 23, y: 19), controlPoint1: CGPoint(x: 23, y: 20.5), controlPoint2: CGPoint(x: 23, y: 20))
            bezier6Path.addCurve(to: CGPoint(x: 21.5, y: 17.5), controlPoint1: CGPoint(x: 23, y: 18), controlPoint2: CGPoint(x: 21.92, y: 17.52))
            bezier6Path.addCurve(to: CGPoint(x: 21, y: 17.5), controlPoint1: CGPoint(x: 21.09, y: 17.52), controlPoint2: CGPoint(x: 21.5, y: 17.5))
            bezier6Path.addCurve(to: CGPoint(x: 19, y: 15), controlPoint1: CGPoint(x: 20.5, y: 17.5), controlPoint2: CGPoint(x: 19, y: 16.99))
            unselectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawMaterialFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 10, y: 10))
            bezierPath.addLine(to: CGPoint(x: 25.5, y: 10))
            bezierPath.addCurve(to: CGPoint(x: 20.06, y: 14), controlPoint1: CGPoint(x: 25.5, y: 12), controlPoint2: CGPoint(x: 23.08, y: 14))
            bezierPath.addLine(to: CGPoint(x: 10, y: 14))
            bezierPath.addLine(to: CGPoint(x: 10, y: 10))
            bezierPath.close()
            selectedColor.setFill()
            bezierPath.fill()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 10, y: 10))
            bezier2Path.addLine(to: CGPoint(x: 25.5, y: 10))
            bezier2Path.addCurve(to: CGPoint(x: 20.06, y: 14), controlPoint1: CGPoint(x: 25.5, y: 12), controlPoint2: CGPoint(x: 23.08, y: 14))
            bezier2Path.addLine(to: CGPoint(x: 10, y: 14))
            bezier2Path.addLine(to: CGPoint(x: 10, y: 10))
            bezier2Path.close()
            selectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 8.5, y: 13))
            bezier3Path.addCurve(to: CGPoint(x: 6, y: 10.5), controlPoint1: CGPoint(x: 7.14, y: 12.71), controlPoint2: CGPoint(x: 6, y: 11.6))
            bezier3Path.addLine(to: CGPoint(x: 8.5, y: 10.5))
            bezier3Path.addLine(to: CGPoint(x: 8.5, y: 13))
            bezier3Path.close()
            selectedColor.setFill()
            bezier3Path.fill()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 8.5, y: 13))
            bezier4Path.addCurve(to: CGPoint(x: 6, y: 10.5), controlPoint1: CGPoint(x: 7.14, y: 12.71), controlPoint2: CGPoint(x: 6, y: 11.6))
            bezier4Path.addLine(to: CGPoint(x: 8.5, y: 10.5))
            bezier4Path.addLine(to: CGPoint(x: 8.5, y: 13))
            bezier4Path.close()
            selectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 13, y: 15))
            bezier5Path.addCurve(to: CGPoint(x: 11, y: 17.5), controlPoint1: CGPoint(x: 13.06, y: 17.04), controlPoint2: CGPoint(x: 11.5, y: 17.5))
            bezier5Path.addCurve(to: CGPoint(x: 10.5, y: 17.5), controlPoint1: CGPoint(x: 10.5, y: 17.5), controlPoint2: CGPoint(x: 11, y: 17.5))
            bezier5Path.addCurve(to: CGPoint(x: 9, y: 19), controlPoint1: CGPoint(x: 10, y: 17.5), controlPoint2: CGPoint(x: 9, y: 18))
            bezier5Path.addCurve(to: CGPoint(x: 9, y: 20.5), controlPoint1: CGPoint(x: 9, y: 20), controlPoint2: CGPoint(x: 9, y: 20.5))
            bezier5Path.addLine(to: CGPoint(x: 14, y: 20.5))
            bezier5Path.addCurve(to: CGPoint(x: 16.5, y: 19.5), controlPoint1: CGPoint(x: 14, y: 20.5), controlPoint2: CGPoint(x: 14.5, y: 19.5))
            bezier5Path.addCurve(to: CGPoint(x: 19, y: 20.5), controlPoint1: CGPoint(x: 18.5, y: 19.5), controlPoint2: CGPoint(x: 19, y: 20.5))
            bezier5Path.addLine(to: CGPoint(x: 23, y: 20.5))
            bezier5Path.addCurve(to: CGPoint(x: 23, y: 19), controlPoint1: CGPoint(x: 23, y: 20.5), controlPoint2: CGPoint(x: 23, y: 20))
            bezier5Path.addCurve(to: CGPoint(x: 21.5, y: 17.5), controlPoint1: CGPoint(x: 23, y: 18), controlPoint2: CGPoint(x: 21.92, y: 17.52))
            bezier5Path.addCurve(to: CGPoint(x: 21, y: 17.5), controlPoint1: CGPoint(x: 21.09, y: 17.52), controlPoint2: CGPoint(x: 21.5, y: 17.5))
            bezier5Path.addCurve(to: CGPoint(x: 19, y: 15), controlPoint1: CGPoint(x: 20.5, y: 17.5), controlPoint2: CGPoint(x: 19, y: 16.99))
            selectedColor.setFill()
            bezier5Path.fill()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 13, y: 15))
            bezier6Path.addCurve(to: CGPoint(x: 11, y: 17.5), controlPoint1: CGPoint(x: 13.06, y: 17.04), controlPoint2: CGPoint(x: 11.5, y: 17.5))
            bezier6Path.addCurve(to: CGPoint(x: 10.5, y: 17.5), controlPoint1: CGPoint(x: 10.5, y: 17.5), controlPoint2: CGPoint(x: 11, y: 17.5))
            bezier6Path.addCurve(to: CGPoint(x: 9, y: 19), controlPoint1: CGPoint(x: 10, y: 17.5), controlPoint2: CGPoint(x: 9, y: 18))
            bezier6Path.addCurve(to: CGPoint(x: 9, y: 20.5), controlPoint1: CGPoint(x: 9, y: 20), controlPoint2: CGPoint(x: 9, y: 20.5))
            bezier6Path.addLine(to: CGPoint(x: 14, y: 20.5))
            bezier6Path.addCurve(to: CGPoint(x: 16.5, y: 19.5), controlPoint1: CGPoint(x: 14, y: 20.5), controlPoint2: CGPoint(x: 14.5, y: 19.5))
            bezier6Path.addCurve(to: CGPoint(x: 19, y: 20.5), controlPoint1: CGPoint(x: 18.5, y: 19.5), controlPoint2: CGPoint(x: 19, y: 20.5))
            bezier6Path.addLine(to: CGPoint(x: 23, y: 20.5))
            bezier6Path.addCurve(to: CGPoint(x: 23, y: 19), controlPoint1: CGPoint(x: 23, y: 20.5), controlPoint2: CGPoint(x: 23, y: 20))
            bezier6Path.addCurve(to: CGPoint(x: 21.5, y: 17.5), controlPoint1: CGPoint(x: 23, y: 18), controlPoint2: CGPoint(x: 21.92, y: 17.52))
            bezier6Path.addCurve(to: CGPoint(x: 21, y: 17.5), controlPoint1: CGPoint(x: 21.09, y: 17.52), controlPoint2: CGPoint(x: 21.5, y: 17.5))
            bezier6Path.addCurve(to: CGPoint(x: 19, y: 15), controlPoint1: CGPoint(x: 20.5, y: 17.5), controlPoint2: CGPoint(x: 19, y: 16.99))
            selectedColor.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 10, y: 10))
            bezier7Path.addLine(to: CGPoint(x: 25.5, y: 10))
            bezier7Path.addCurve(to: CGPoint(x: 20.06, y: 14), controlPoint1: CGPoint(x: 25.5, y: 12), controlPoint2: CGPoint(x: 23.08, y: 14))
            bezier7Path.addLine(to: CGPoint(x: 10, y: 14))
            bezier7Path.addLine(to: CGPoint(x: 10, y: 10))
            bezier7Path.close()
            unselectedColor.setFill()
            bezier7Path.fill()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 10, y: 10))
            bezier8Path.addLine(to: CGPoint(x: 25.5, y: 10))
            bezier8Path.addCurve(to: CGPoint(x: 20.06, y: 14), controlPoint1: CGPoint(x: 25.5, y: 12), controlPoint2: CGPoint(x: 23.08, y: 14))
            bezier8Path.addLine(to: CGPoint(x: 10, y: 14))
            bezier8Path.addLine(to: CGPoint(x: 10, y: 10))
            bezier8Path.close()
            unselectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 8.5, y: 13))
            bezier9Path.addCurve(to: CGPoint(x: 6, y: 10.5), controlPoint1: CGPoint(x: 7.14, y: 12.71), controlPoint2: CGPoint(x: 6, y: 11.6))
            bezier9Path.addLine(to: CGPoint(x: 8.5, y: 10.5))
            bezier9Path.addLine(to: CGPoint(x: 8.5, y: 13))
            bezier9Path.close()
            unselectedColor.setFill()
            bezier9Path.fill()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 8.5, y: 13))
            bezier10Path.addCurve(to: CGPoint(x: 6, y: 10.5), controlPoint1: CGPoint(x: 7.14, y: 12.71), controlPoint2: CGPoint(x: 6, y: 11.6))
            bezier10Path.addLine(to: CGPoint(x: 8.5, y: 10.5))
            bezier10Path.addLine(to: CGPoint(x: 8.5, y: 13))
            bezier10Path.close()
            unselectedColor.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 13, y: 15))
            bezier11Path.addCurve(to: CGPoint(x: 11, y: 17.5), controlPoint1: CGPoint(x: 13.06, y: 17.04), controlPoint2: CGPoint(x: 11.5, y: 17.5))
            bezier11Path.addCurve(to: CGPoint(x: 10.5, y: 17.5), controlPoint1: CGPoint(x: 10.5, y: 17.5), controlPoint2: CGPoint(x: 11, y: 17.5))
            bezier11Path.addCurve(to: CGPoint(x: 9, y: 19), controlPoint1: CGPoint(x: 10, y: 17.5), controlPoint2: CGPoint(x: 9, y: 18))
            bezier11Path.addCurve(to: CGPoint(x: 9, y: 20.5), controlPoint1: CGPoint(x: 9, y: 20), controlPoint2: CGPoint(x: 9, y: 20.5))
            bezier11Path.addLine(to: CGPoint(x: 14, y: 20.5))
            bezier11Path.addCurve(to: CGPoint(x: 16.5, y: 19.5), controlPoint1: CGPoint(x: 14, y: 20.5), controlPoint2: CGPoint(x: 14.5, y: 19.5))
            bezier11Path.addCurve(to: CGPoint(x: 19, y: 20.5), controlPoint1: CGPoint(x: 18.5, y: 19.5), controlPoint2: CGPoint(x: 19, y: 20.5))
            bezier11Path.addLine(to: CGPoint(x: 23, y: 20.5))
            bezier11Path.addCurve(to: CGPoint(x: 23, y: 19), controlPoint1: CGPoint(x: 23, y: 20.5), controlPoint2: CGPoint(x: 23, y: 20))
            bezier11Path.addCurve(to: CGPoint(x: 21.5, y: 17.5), controlPoint1: CGPoint(x: 23, y: 18), controlPoint2: CGPoint(x: 21.92, y: 17.52))
            bezier11Path.addCurve(to: CGPoint(x: 21, y: 17.5), controlPoint1: CGPoint(x: 21.09, y: 17.52), controlPoint2: CGPoint(x: 21.5, y: 17.5))
            bezier11Path.addCurve(to: CGPoint(x: 19, y: 15), controlPoint1: CGPoint(x: 20.5, y: 17.5), controlPoint2: CGPoint(x: 19, y: 16.99))
            unselectedColor.setFill()
            bezier11Path.fill()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 13, y: 15))
            bezier12Path.addCurve(to: CGPoint(x: 11, y: 17.5), controlPoint1: CGPoint(x: 13.06, y: 17.04), controlPoint2: CGPoint(x: 11.5, y: 17.5))
            bezier12Path.addCurve(to: CGPoint(x: 10.5, y: 17.5), controlPoint1: CGPoint(x: 10.5, y: 17.5), controlPoint2: CGPoint(x: 11, y: 17.5))
            bezier12Path.addCurve(to: CGPoint(x: 9, y: 19), controlPoint1: CGPoint(x: 10, y: 17.5), controlPoint2: CGPoint(x: 9, y: 18))
            bezier12Path.addCurve(to: CGPoint(x: 9, y: 20.5), controlPoint1: CGPoint(x: 9, y: 20), controlPoint2: CGPoint(x: 9, y: 20.5))
            bezier12Path.addLine(to: CGPoint(x: 14, y: 20.5))
            bezier12Path.addCurve(to: CGPoint(x: 16.5, y: 19.5), controlPoint1: CGPoint(x: 14, y: 20.5), controlPoint2: CGPoint(x: 14.5, y: 19.5))
            bezier12Path.addCurve(to: CGPoint(x: 19, y: 20.5), controlPoint1: CGPoint(x: 18.5, y: 19.5), controlPoint2: CGPoint(x: 19, y: 20.5))
            bezier12Path.addLine(to: CGPoint(x: 23, y: 20.5))
            bezier12Path.addCurve(to: CGPoint(x: 23, y: 19), controlPoint1: CGPoint(x: 23, y: 20.5), controlPoint2: CGPoint(x: 23, y: 20))
            bezier12Path.addCurve(to: CGPoint(x: 21.5, y: 17.5), controlPoint1: CGPoint(x: 23, y: 18), controlPoint2: CGPoint(x: 21.92, y: 17.52))
            bezier12Path.addCurve(to: CGPoint(x: 21, y: 17.5), controlPoint1: CGPoint(x: 21.09, y: 17.52), controlPoint2: CGPoint(x: 21.5, y: 17.5))
            bezier12Path.addCurve(to: CGPoint(x: 19, y: 15), controlPoint1: CGPoint(x: 20.5, y: 17.5), controlPoint2: CGPoint(x: 19, y: 16.99))
            unselectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawMusicUnfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip
            let clipPath = UIBezierPath()
            clipPath.move(to: CGPoint(x: -2, y: -3.5))
            clipPath.addLine(to: CGPoint(x: 32, y: -3.5))
            clipPath.addLine(to: CGPoint(x: 32, y: 33.5))
            clipPath.addLine(to: CGPoint(x: -2, y: 33.5))
            clipPath.addLine(to: CGPoint(x: -2, y: -3.5))
            clipPath.close()
            clipPath.move(to: CGPoint(x: 12.42, y: 8.72))
            clipPath.addLine(to: CGPoint(x: 22, y: 6.5))
            clipPath.addCurve(to: CGPoint(x: 22, y: 19.8), controlPoint1: CGPoint(x: 22, y: 6.5), controlPoint2: CGPoint(x: 22, y: 18.33))
            clipPath.addCurve(to: CGPoint(x: 19.79, y: 22.02), controlPoint1: CGPoint(x: 22, y: 21.28), controlPoint2: CGPoint(x: 21.26, y: 22.02))
            clipPath.addCurve(to: CGPoint(x: 16.84, y: 19.8), controlPoint1: CGPoint(x: 18.32, y: 22.02), controlPoint2: CGPoint(x: 16.84, y: 21.28))
            clipPath.addCurve(to: CGPoint(x: 19.05, y: 18.33), controlPoint1: CGPoint(x: 16.84, y: 18.33), controlPoint2: CGPoint(x: 17.58, y: 18.33))
            clipPath.addCurve(to: CGPoint(x: 21.26, y: 16.85), controlPoint1: CGPoint(x: 20.53, y: 18.33), controlPoint2: CGPoint(x: 21.26, y: 17.59))
            clipPath.addLine(to: CGPoint(x: 21.26, y: 10.2))
            clipPath.addLine(to: CGPoint(x: 13.16, y: 12.04))
            clipPath.addCurve(to: CGPoint(x: 13.16, y: 21.28), controlPoint1: CGPoint(x: 13.16, y: 12.04), controlPoint2: CGPoint(x: 13.16, y: 19.8))
            clipPath.addCurve(to: CGPoint(x: 10.95, y: 23.5), controlPoint1: CGPoint(x: 13.16, y: 22.76), controlPoint2: CGPoint(x: 12.42, y: 23.5))
            clipPath.addCurve(to: CGPoint(x: 8, y: 21.28), controlPoint1: CGPoint(x: 9.47, y: 23.5), controlPoint2: CGPoint(x: 8, y: 22.76))
            clipPath.addCurve(to: CGPoint(x: 10.21, y: 19.8), controlPoint1: CGPoint(x: 8, y: 19.8), controlPoint2: CGPoint(x: 8.74, y: 20.04))
            clipPath.addCurve(to: CGPoint(x: 12.42, y: 18.33), controlPoint1: CGPoint(x: 11.68, y: 19.8), controlPoint2: CGPoint(x: 12.42, y: 19.07))
            clipPath.addLine(to: CGPoint(x: 12.42, y: 8.72))
            clipPath.close()
            clipPath.usesEvenOddFillRule = true
            clipPath.addClip()


            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 12.42, y: 8.82))
            bezierPath.addLine(to: CGPoint(x: 22, y: 6.6))
            bezierPath.addCurve(to: CGPoint(x: 22, y: 19.9), controlPoint1: CGPoint(x: 22, y: 6.6), controlPoint2: CGPoint(x: 22, y: 18.43))
            bezierPath.addCurve(to: CGPoint(x: 19.79, y: 22.12), controlPoint1: CGPoint(x: 22, y: 21.38), controlPoint2: CGPoint(x: 21.26, y: 22.12))
            bezierPath.addCurve(to: CGPoint(x: 16.84, y: 19.9), controlPoint1: CGPoint(x: 18.32, y: 22.12), controlPoint2: CGPoint(x: 16.84, y: 21.38))
            bezierPath.addCurve(to: CGPoint(x: 19.05, y: 18.43), controlPoint1: CGPoint(x: 16.84, y: 18.43), controlPoint2: CGPoint(x: 17.58, y: 18.43))
            bezierPath.addCurve(to: CGPoint(x: 21.26, y: 16.95), controlPoint1: CGPoint(x: 20.53, y: 18.43), controlPoint2: CGPoint(x: 21.26, y: 17.69))
            bezierPath.addLine(to: CGPoint(x: 21.26, y: 10.3))
            bezierPath.addLine(to: CGPoint(x: 13.16, y: 12.14))
            bezierPath.addCurve(to: CGPoint(x: 13.16, y: 21.38), controlPoint1: CGPoint(x: 13.16, y: 12.14), controlPoint2: CGPoint(x: 13.16, y: 19.9))
            bezierPath.addCurve(to: CGPoint(x: 10.95, y: 23.6), controlPoint1: CGPoint(x: 13.16, y: 22.86), controlPoint2: CGPoint(x: 12.42, y: 23.6))
            bezierPath.addCurve(to: CGPoint(x: 8, y: 21.38), controlPoint1: CGPoint(x: 9.47, y: 23.6), controlPoint2: CGPoint(x: 8, y: 22.86))
            bezierPath.addCurve(to: CGPoint(x: 10.21, y: 19.9), controlPoint1: CGPoint(x: 8, y: 19.9), controlPoint2: CGPoint(x: 8.74, y: 20.14))
            bezierPath.addCurve(to: CGPoint(x: 12.42, y: 18.43), controlPoint1: CGPoint(x: 11.68, y: 19.9), controlPoint2: CGPoint(x: 12.42, y: 19.17))
            bezierPath.addLine(to: CGPoint(x: 12.42, y: 8.82))
            bezierPath.close()
            selectedColor.setStroke()
            bezierPath.lineWidth = 2
            bezierPath.stroke()


            context.endTransparencyLayer()
            context.restoreGState()
        }


        if (unselected) {
            //// unselectedGroup
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 2
            let clip2Path = UIBezierPath()
            clip2Path.move(to: CGPoint(x: -2, y: -3.5))
            clip2Path.addLine(to: CGPoint(x: 32, y: -3.5))
            clip2Path.addLine(to: CGPoint(x: 32, y: 33.5))
            clip2Path.addLine(to: CGPoint(x: -2, y: 33.5))
            clip2Path.addLine(to: CGPoint(x: -2, y: -3.5))
            clip2Path.close()
            clip2Path.move(to: CGPoint(x: 12.42, y: 8.72))
            clip2Path.addLine(to: CGPoint(x: 22, y: 6.5))
            clip2Path.addCurve(to: CGPoint(x: 22, y: 19.8), controlPoint1: CGPoint(x: 22, y: 6.5), controlPoint2: CGPoint(x: 22, y: 18.33))
            clip2Path.addCurve(to: CGPoint(x: 19.79, y: 22.02), controlPoint1: CGPoint(x: 22, y: 21.28), controlPoint2: CGPoint(x: 21.26, y: 22.02))
            clip2Path.addCurve(to: CGPoint(x: 16.84, y: 19.8), controlPoint1: CGPoint(x: 18.32, y: 22.02), controlPoint2: CGPoint(x: 16.84, y: 21.28))
            clip2Path.addCurve(to: CGPoint(x: 19.05, y: 18.33), controlPoint1: CGPoint(x: 16.84, y: 18.33), controlPoint2: CGPoint(x: 17.58, y: 18.33))
            clip2Path.addCurve(to: CGPoint(x: 21.26, y: 16.85), controlPoint1: CGPoint(x: 20.53, y: 18.33), controlPoint2: CGPoint(x: 21.26, y: 17.59))
            clip2Path.addLine(to: CGPoint(x: 21.26, y: 10.2))
            clip2Path.addLine(to: CGPoint(x: 13.16, y: 12.04))
            clip2Path.addCurve(to: CGPoint(x: 13.16, y: 21.28), controlPoint1: CGPoint(x: 13.16, y: 12.04), controlPoint2: CGPoint(x: 13.16, y: 19.8))
            clip2Path.addCurve(to: CGPoint(x: 10.95, y: 23.5), controlPoint1: CGPoint(x: 13.16, y: 22.76), controlPoint2: CGPoint(x: 12.42, y: 23.5))
            clip2Path.addCurve(to: CGPoint(x: 8, y: 21.28), controlPoint1: CGPoint(x: 9.47, y: 23.5), controlPoint2: CGPoint(x: 8, y: 22.76))
            clip2Path.addCurve(to: CGPoint(x: 10.21, y: 19.8), controlPoint1: CGPoint(x: 8, y: 19.8), controlPoint2: CGPoint(x: 8.74, y: 20.04))
            clip2Path.addCurve(to: CGPoint(x: 12.42, y: 18.33), controlPoint1: CGPoint(x: 11.68, y: 19.8), controlPoint2: CGPoint(x: 12.42, y: 19.07))
            clip2Path.addLine(to: CGPoint(x: 12.42, y: 8.72))
            clip2Path.close()
            clip2Path.usesEvenOddFillRule = true
            clip2Path.addClip()


            if (unselected) {
                //// Bezier 2 Drawing
                let bezier2Path = UIBezierPath()
                bezier2Path.move(to: CGPoint(x: 12.42, y: 8.82))
                bezier2Path.addLine(to: CGPoint(x: 22, y: 6.6))
                bezier2Path.addCurve(to: CGPoint(x: 22, y: 19.9), controlPoint1: CGPoint(x: 22, y: 6.6), controlPoint2: CGPoint(x: 22, y: 18.43))
                bezier2Path.addCurve(to: CGPoint(x: 19.79, y: 22.12), controlPoint1: CGPoint(x: 22, y: 21.38), controlPoint2: CGPoint(x: 21.26, y: 22.12))
                bezier2Path.addCurve(to: CGPoint(x: 16.84, y: 19.9), controlPoint1: CGPoint(x: 18.32, y: 22.12), controlPoint2: CGPoint(x: 16.84, y: 21.38))
                bezier2Path.addCurve(to: CGPoint(x: 19.05, y: 18.43), controlPoint1: CGPoint(x: 16.84, y: 18.43), controlPoint2: CGPoint(x: 17.58, y: 18.43))
                bezier2Path.addCurve(to: CGPoint(x: 21.26, y: 16.95), controlPoint1: CGPoint(x: 20.53, y: 18.43), controlPoint2: CGPoint(x: 21.26, y: 17.69))
                bezier2Path.addLine(to: CGPoint(x: 21.26, y: 10.3))
                bezier2Path.addLine(to: CGPoint(x: 13.16, y: 12.14))
                bezier2Path.addCurve(to: CGPoint(x: 13.16, y: 21.38), controlPoint1: CGPoint(x: 13.16, y: 12.14), controlPoint2: CGPoint(x: 13.16, y: 19.9))
                bezier2Path.addCurve(to: CGPoint(x: 10.95, y: 23.6), controlPoint1: CGPoint(x: 13.16, y: 22.86), controlPoint2: CGPoint(x: 12.42, y: 23.6))
                bezier2Path.addCurve(to: CGPoint(x: 8, y: 21.38), controlPoint1: CGPoint(x: 9.47, y: 23.6), controlPoint2: CGPoint(x: 8, y: 22.86))
                bezier2Path.addCurve(to: CGPoint(x: 10.21, y: 19.9), controlPoint1: CGPoint(x: 8, y: 19.9), controlPoint2: CGPoint(x: 8.74, y: 20.14))
                bezier2Path.addCurve(to: CGPoint(x: 12.42, y: 18.43), controlPoint1: CGPoint(x: 11.68, y: 19.9), controlPoint2: CGPoint(x: 12.42, y: 19.17))
                bezier2Path.addLine(to: CGPoint(x: 12.42, y: 8.82))
                bezier2Path.close()
                unselectedColor.setStroke()
                bezier2Path.lineWidth = 2
                bezier2Path.stroke()
            }


            context.endTransparencyLayer()
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawMusicFilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        if (selected) {
            //// selectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 12.42, y: 8.72))
            bezierPath.addLine(to: CGPoint(x: 22, y: 6.5))
            bezierPath.addCurve(to: CGPoint(x: 22, y: 19.8), controlPoint1: CGPoint(x: 22, y: 6.5), controlPoint2: CGPoint(x: 22, y: 18.33))
            bezierPath.addCurve(to: CGPoint(x: 19.79, y: 22.02), controlPoint1: CGPoint(x: 22, y: 21.28), controlPoint2: CGPoint(x: 21.26, y: 22.02))
            bezierPath.addCurve(to: CGPoint(x: 16.84, y: 19.8), controlPoint1: CGPoint(x: 18.32, y: 22.02), controlPoint2: CGPoint(x: 16.84, y: 21.28))
            bezierPath.addCurve(to: CGPoint(x: 19.05, y: 18.33), controlPoint1: CGPoint(x: 16.84, y: 18.33), controlPoint2: CGPoint(x: 17.58, y: 18.33))
            bezierPath.addCurve(to: CGPoint(x: 21.26, y: 16.85), controlPoint1: CGPoint(x: 20.53, y: 18.33), controlPoint2: CGPoint(x: 21.26, y: 17.59))
            bezierPath.addLine(to: CGPoint(x: 21.26, y: 10.2))
            bezierPath.addLine(to: CGPoint(x: 13.16, y: 12.04))
            bezierPath.addCurve(to: CGPoint(x: 13.16, y: 21.28), controlPoint1: CGPoint(x: 13.16, y: 12.04), controlPoint2: CGPoint(x: 13.16, y: 19.8))
            bezierPath.addCurve(to: CGPoint(x: 10.95, y: 23.5), controlPoint1: CGPoint(x: 13.16, y: 22.76), controlPoint2: CGPoint(x: 12.42, y: 23.5))
            bezierPath.addCurve(to: CGPoint(x: 8, y: 21.28), controlPoint1: CGPoint(x: 9.47, y: 23.5), controlPoint2: CGPoint(x: 8, y: 22.76))
            bezierPath.addCurve(to: CGPoint(x: 10.21, y: 19.8), controlPoint1: CGPoint(x: 8, y: 19.8), controlPoint2: CGPoint(x: 8.74, y: 20.04))
            bezierPath.addCurve(to: CGPoint(x: 12.42, y: 18.33), controlPoint1: CGPoint(x: 11.68, y: 19.8), controlPoint2: CGPoint(x: 12.42, y: 19.07))
            bezierPath.addLine(to: CGPoint(x: 12.42, y: 8.72))
            bezierPath.close()
            selectedColor.setFill()
            bezierPath.fill()
            selectedColor.setStroke()
            bezierPath.lineWidth = 2
            bezierPath.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 12.42, y: 8.72))
            bezier2Path.addLine(to: CGPoint(x: 22, y: 6.5))
            bezier2Path.addCurve(to: CGPoint(x: 22, y: 19.8), controlPoint1: CGPoint(x: 22, y: 6.5), controlPoint2: CGPoint(x: 22, y: 18.33))
            bezier2Path.addCurve(to: CGPoint(x: 19.79, y: 22.02), controlPoint1: CGPoint(x: 22, y: 21.28), controlPoint2: CGPoint(x: 21.26, y: 22.02))
            bezier2Path.addCurve(to: CGPoint(x: 16.84, y: 19.8), controlPoint1: CGPoint(x: 18.32, y: 22.02), controlPoint2: CGPoint(x: 16.84, y: 21.28))
            bezier2Path.addCurve(to: CGPoint(x: 19.05, y: 18.33), controlPoint1: CGPoint(x: 16.84, y: 18.33), controlPoint2: CGPoint(x: 17.58, y: 18.33))
            bezier2Path.addCurve(to: CGPoint(x: 21.26, y: 16.85), controlPoint1: CGPoint(x: 20.53, y: 18.33), controlPoint2: CGPoint(x: 21.26, y: 17.59))
            bezier2Path.addLine(to: CGPoint(x: 21.26, y: 10.2))
            bezier2Path.addLine(to: CGPoint(x: 13.16, y: 12.04))
            bezier2Path.addCurve(to: CGPoint(x: 13.16, y: 21.28), controlPoint1: CGPoint(x: 13.16, y: 12.04), controlPoint2: CGPoint(x: 13.16, y: 19.8))
            bezier2Path.addCurve(to: CGPoint(x: 10.95, y: 23.5), controlPoint1: CGPoint(x: 13.16, y: 22.76), controlPoint2: CGPoint(x: 12.42, y: 23.5))
            bezier2Path.addCurve(to: CGPoint(x: 8, y: 21.28), controlPoint1: CGPoint(x: 9.47, y: 23.5), controlPoint2: CGPoint(x: 8, y: 22.76))
            bezier2Path.addCurve(to: CGPoint(x: 10.21, y: 19.8), controlPoint1: CGPoint(x: 8, y: 19.8), controlPoint2: CGPoint(x: 8.74, y: 20.04))
            bezier2Path.addCurve(to: CGPoint(x: 12.42, y: 18.33), controlPoint1: CGPoint(x: 11.68, y: 19.8), controlPoint2: CGPoint(x: 12.42, y: 19.07))
            bezier2Path.addLine(to: CGPoint(x: 12.42, y: 8.72))
            bezier2Path.close()
            unselectedColor.setFill()
            bezier2Path.fill()
            unselectedColor.setStroke()
            bezier2Path.lineWidth = 2
            bezier2Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawAttractorNone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 34), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 34)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        //// cardBackground Drawing
        let cardBackgroundRect = CGRect(x: 0, y: 0, width: 26, height: 34)
        context.saveGState()
        context.clip(to: cardBackgroundRect)
        context.translateBy(x: cardBackgroundRect.minX, y: cardBackgroundRect.minY)

        HKStyle.drawCard(frame: CGRect(origin: .zero, size: cardBackgroundRect.size), resizing: .stretch, selectedBackgroundColor: selectedBackgroundColor, selected: selected)
        context.restoreGState()


        if (selected) {
            //// selectedGroup
            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5.8, y: 9.8, width: 14.4, height: 14.4))
            selectedColor.setStroke()
            ovalPath.lineWidth = 1
            ovalPath.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 10.26, y: 14.26))
            bezier3Path.addLine(to: CGPoint(x: 15.74, y: 19.74))
            selectedColor.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.lineCapStyle = .round
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 15.74, y: 14.26))
            bezier4Path.addLine(to: CGPoint(x: 10.26, y: 19.74))
            selectedColor.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.lineCapStyle = .round
            bezier4Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 5.8, y: 9.8, width: 14.4, height: 14.4))
            unselectedColor.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 10.26, y: 14.26))
            bezierPath.addLine(to: CGPoint(x: 15.74, y: 19.74))
            unselectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.lineCapStyle = .round
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 15.74, y: 14.26))
            bezier2Path.addLine(to: CGPoint(x: 10.26, y: 19.74))
            unselectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.lineCapStyle = .round
            bezier2Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawAttractorCentre(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 34), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 34)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)

        //// Variable Declarations
        let unselected = !selected

        //// cardBackground Drawing
        let cardBackgroundRect = CGRect(x: 0, y: 0, width: 26, height: 34)
        context.saveGState()
        context.clip(to: cardBackgroundRect)
        context.translateBy(x: cardBackgroundRect.minX, y: cardBackgroundRect.minY)

        HKStyle.drawCard(frame: CGRect(origin: .zero, size: cardBackgroundRect.size), resizing: .stretch, selectedBackgroundColor: selectedBackgroundColor, selected: selected)
        context.restoreGState()


        //// selectedGroup
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 4.77, y: 17))
        bezier3Path.addLine(to: CGPoint(x: 10.26, y: 17))
        selectedColor.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 8.21, y: 14.61))
        bezier4Path.addLine(to: CGPoint(x: 10.59, y: 17.02))
        bezier4Path.addLine(to: CGPoint(x: 8.21, y: 19.41))
        selectedColor.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.lineCapStyle = .round
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 21.23, y: 17))
        bezier5Path.addLine(to: CGPoint(x: 15.74, y: 17))
        selectedColor.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.lineCapStyle = .round
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 17.79, y: 14.61))
        bezier6Path.addLine(to: CGPoint(x: 15.41, y: 17.02))
        bezier6Path.addLine(to: CGPoint(x: 17.79, y: 19.41))
        selectedColor.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.lineCapStyle = .round
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 13, y: 8.77))
        bezier7Path.addLine(to: CGPoint(x: 13, y: 14.26))
        selectedColor.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.lineCapStyle = .round
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 10.61, y: 12.21))
        bezier8Path.addLine(to: CGPoint(x: 13.02, y: 14.59))
        bezier8Path.addLine(to: CGPoint(x: 15.41, y: 12.21))
        selectedColor.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.lineCapStyle = .round
        bezier8Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 13, y: 25.23))
        bezier9Path.addLine(to: CGPoint(x: 13, y: 19.74))
        selectedColor.setStroke()
        bezier9Path.lineWidth = 1
        bezier9Path.lineCapStyle = .round
        bezier9Path.stroke()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 10.61, y: 21.79))
        bezier10Path.addLine(to: CGPoint(x: 13.02, y: 19.41))
        bezier10Path.addLine(to: CGPoint(x: 15.41, y: 21.79))
        selectedColor.setStroke()
        bezier10Path.lineWidth = 1
        bezier10Path.lineCapStyle = .round
        bezier10Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 12.3, y: 16.3, width: 1.4, height: 1.4))
        selectedColor.setFill()
        ovalPath.fill()




        if (unselected) {
            //// unselectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 4.77, y: 17))
            bezierPath.addLine(to: CGPoint(x: 10.26, y: 17))
            unselectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.lineCapStyle = .round
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 8.21, y: 14.61))
            bezier2Path.addLine(to: CGPoint(x: 10.59, y: 17.02))
            bezier2Path.addLine(to: CGPoint(x: 8.21, y: 19.41))
            unselectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.lineCapStyle = .round
            bezier2Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 21.23, y: 17))
            bezier11Path.addLine(to: CGPoint(x: 15.74, y: 17))
            unselectedColor.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.lineCapStyle = .round
            bezier11Path.stroke()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 17.79, y: 14.61))
            bezier12Path.addLine(to: CGPoint(x: 15.41, y: 17.02))
            bezier12Path.addLine(to: CGPoint(x: 17.79, y: 19.41))
            unselectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.lineCapStyle = .round
            bezier12Path.stroke()


            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 13, y: 8.77))
            bezier13Path.addLine(to: CGPoint(x: 13, y: 14.26))
            unselectedColor.setStroke()
            bezier13Path.lineWidth = 1
            bezier13Path.lineCapStyle = .round
            bezier13Path.stroke()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 10.61, y: 12.21))
            bezier14Path.addLine(to: CGPoint(x: 13.02, y: 14.59))
            bezier14Path.addLine(to: CGPoint(x: 15.41, y: 12.21))
            unselectedColor.setStroke()
            bezier14Path.lineWidth = 1
            bezier14Path.lineCapStyle = .round
            bezier14Path.stroke()


            //// Bezier 15 Drawing
            let bezier15Path = UIBezierPath()
            bezier15Path.move(to: CGPoint(x: 13, y: 25.23))
            bezier15Path.addLine(to: CGPoint(x: 13, y: 19.74))
            unselectedColor.setStroke()
            bezier15Path.lineWidth = 1
            bezier15Path.lineCapStyle = .round
            bezier15Path.stroke()


            //// Bezier 16 Drawing
            let bezier16Path = UIBezierPath()
            bezier16Path.move(to: CGPoint(x: 10.61, y: 21.79))
            bezier16Path.addLine(to: CGPoint(x: 13.02, y: 19.41))
            bezier16Path.addLine(to: CGPoint(x: 15.41, y: 21.79))
            unselectedColor.setStroke()
            bezier16Path.lineWidth = 1
            bezier16Path.lineCapStyle = .round
            bezier16Path.stroke()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 12.3, y: 16.3, width: 1.4, height: 1.4))
            unselectedColor.setFill()
            oval2Path.fill()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawAttractorTarget(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 34), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 34)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)
        let strokeColor3 = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000)

        //// Variable Declarations
        let unselected = !selected

        //// cardBackground Drawing
        let cardBackgroundRect = CGRect(x: 0, y: 0, width: 26, height: 34)
        context.saveGState()
        context.clip(to: cardBackgroundRect)
        context.translateBy(x: cardBackgroundRect.minX, y: cardBackgroundRect.minY)

        HKStyle.drawCard(frame: CGRect(origin: .zero, size: cardBackgroundRect.size), resizing: .stretch, selectedBackgroundColor: selectedBackgroundColor, selected: selected)
        context.restoreGState()


        if (selected) {
            //// selectedGroup
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 10.3, y: 12.98))
            bezier3Path.addCurve(to: CGPoint(x: 13, y: 12.2), controlPoint1: CGPoint(x: 11.06, y: 12.48), controlPoint2: CGPoint(x: 11.98, y: 12.2))
            bezier3Path.addCurve(to: CGPoint(x: 15.73, y: 13), controlPoint1: CGPoint(x: 14.03, y: 12.2), controlPoint2: CGPoint(x: 14.96, y: 12.49))
            strokeColor3.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.lineCapStyle = .round
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 10.3, y: 21.13))
            bezier4Path.addCurve(to: CGPoint(x: 13, y: 21.91), controlPoint1: CGPoint(x: 11.06, y: 21.63), controlPoint2: CGPoint(x: 11.98, y: 21.91))
            bezier4Path.addCurve(to: CGPoint(x: 15.73, y: 21.11), controlPoint1: CGPoint(x: 14.03, y: 21.91), controlPoint2: CGPoint(x: 14.96, y: 21.62))
            strokeColor3.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.lineCapStyle = .round
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 17.13, y: 14.26))
            bezier5Path.addCurve(to: CGPoint(x: 17.91, y: 16.96), controlPoint1: CGPoint(x: 17.63, y: 15.02), controlPoint2: CGPoint(x: 17.91, y: 15.94))
            bezier5Path.addCurve(to: CGPoint(x: 17.11, y: 19.69), controlPoint1: CGPoint(x: 17.91, y: 17.99), controlPoint2: CGPoint(x: 17.62, y: 18.92))
            strokeColor3.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.lineCapStyle = .round
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 8.98, y: 14.26))
            bezier6Path.addCurve(to: CGPoint(x: 8.2, y: 16.96), controlPoint1: CGPoint(x: 8.48, y: 15.02), controlPoint2: CGPoint(x: 8.2, y: 15.94))
            bezier6Path.addCurve(to: CGPoint(x: 9, y: 19.69), controlPoint1: CGPoint(x: 8.2, y: 17.99), controlPoint2: CGPoint(x: 8.49, y: 18.92))
            strokeColor3.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.lineCapStyle = .round
            bezier6Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 13, y: 8.77))
            bezier7Path.addLine(to: CGPoint(x: 13, y: 25.23))
            strokeColor3.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.lineCapStyle = .round
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 4.77, y: 17))
            bezier8Path.addLine(to: CGPoint(x: 21.23, y: 17))
            strokeColor3.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.lineCapStyle = .round
            bezier8Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 10.3, y: 12.98))
            bezierPath.addCurve(to: CGPoint(x: 13, y: 12.2), controlPoint1: CGPoint(x: 11.06, y: 12.48), controlPoint2: CGPoint(x: 11.98, y: 12.2))
            bezierPath.addCurve(to: CGPoint(x: 15.73, y: 13), controlPoint1: CGPoint(x: 14.03, y: 12.2), controlPoint2: CGPoint(x: 14.96, y: 12.49))
            unselectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.lineCapStyle = .round
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 10.3, y: 21.13))
            bezier2Path.addCurve(to: CGPoint(x: 13, y: 21.91), controlPoint1: CGPoint(x: 11.06, y: 21.63), controlPoint2: CGPoint(x: 11.98, y: 21.91))
            bezier2Path.addCurve(to: CGPoint(x: 15.73, y: 21.11), controlPoint1: CGPoint(x: 14.03, y: 21.91), controlPoint2: CGPoint(x: 14.96, y: 21.62))
            unselectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.lineCapStyle = .round
            bezier2Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 17.13, y: 14.26))
            bezier9Path.addCurve(to: CGPoint(x: 17.91, y: 16.96), controlPoint1: CGPoint(x: 17.63, y: 15.02), controlPoint2: CGPoint(x: 17.91, y: 15.94))
            bezier9Path.addCurve(to: CGPoint(x: 17.11, y: 19.69), controlPoint1: CGPoint(x: 17.91, y: 17.99), controlPoint2: CGPoint(x: 17.62, y: 18.92))
            unselectedColor.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.lineCapStyle = .round
            bezier9Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 8.98, y: 14.26))
            bezier10Path.addCurve(to: CGPoint(x: 8.2, y: 16.96), controlPoint1: CGPoint(x: 8.48, y: 15.02), controlPoint2: CGPoint(x: 8.2, y: 15.94))
            bezier10Path.addCurve(to: CGPoint(x: 9, y: 19.69), controlPoint1: CGPoint(x: 8.2, y: 17.99), controlPoint2: CGPoint(x: 8.49, y: 18.92))
            unselectedColor.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.lineCapStyle = .round
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 13, y: 8.77))
            bezier11Path.addLine(to: CGPoint(x: 13, y: 25.23))
            unselectedColor.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.lineCapStyle = .round
            bezier11Path.stroke()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 4.77, y: 17))
            bezier12Path.addLine(to: CGPoint(x: 21.23, y: 17))
            unselectedColor.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.lineCapStyle = .round
            bezier12Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawAttractorOpposite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 34), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 34)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)
        let strokeColor3 = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000)

        //// Variable Declarations
        let unselected = !selected

        //// cardBackground Drawing
        let cardBackgroundRect = CGRect(x: 0, y: 0, width: 26, height: 34)
        context.saveGState()
        context.clip(to: cardBackgroundRect)
        context.translateBy(x: cardBackgroundRect.minX, y: cardBackgroundRect.minY)

        HKStyle.drawCard(frame: CGRect(origin: .zero, size: cardBackgroundRect.size), resizing: .stretch, selectedBackgroundColor: selectedBackgroundColor, selected: selected)
        context.restoreGState()


        if (selected) {
            //// selectedGroup
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 6.14, y: 21.8))
            bezier3Path.addLine(to: CGPoint(x: 20.2, y: 21.8))
            strokeColor3.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.lineCapStyle = .round
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 8.19, y: 24.19))
            bezier4Path.addLine(to: CGPoint(x: 5.81, y: 21.78))
            bezier4Path.addLine(to: CGPoint(x: 8.19, y: 19.39))
            strokeColor3.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.lineCapStyle = .round
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 19.86, y: 13.57))
            bezier5Path.addLine(to: CGPoint(x: 5.8, y: 13.57))
            strokeColor3.setStroke()
            bezier5Path.lineWidth = 1
            bezier5Path.lineCapStyle = .round
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 17.81, y: 15.96))
            bezier6Path.addLine(to: CGPoint(x: 20.19, y: 13.56))
            bezier6Path.addLine(to: CGPoint(x: 17.81, y: 11.16))
            strokeColor3.setStroke()
            bezier6Path.lineWidth = 1
            bezier6Path.lineCapStyle = .round
            bezier6Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 6.14, y: 21.8))
            bezierPath.addLine(to: CGPoint(x: 20.2, y: 21.8))
            unselectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.lineCapStyle = .round
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 8.19, y: 24.19))
            bezier2Path.addLine(to: CGPoint(x: 5.81, y: 21.78))
            bezier2Path.addLine(to: CGPoint(x: 8.19, y: 19.39))
            unselectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.lineCapStyle = .round
            bezier2Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 19.86, y: 13.57))
            bezier7Path.addLine(to: CGPoint(x: 5.8, y: 13.57))
            unselectedColor.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.lineCapStyle = .round
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 17.81, y: 15.96))
            bezier8Path.addLine(to: CGPoint(x: 20.19, y: 13.56))
            bezier8Path.addLine(to: CGPoint(x: 17.81, y: 11.16))
            unselectedColor.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.lineCapStyle = .round
            bezier8Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawAttractorFinger(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 34), resizing: ResizingBehavior = .aspectFit, selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 34)


        //// Color Declarations
        var selectedColorHueComponent: CGFloat = 1
        var selectedColorSaturationComponent: CGFloat = 1
        var selectedColorBrightnessComponent: CGFloat = 1
        selectedColor.getHue(&selectedColorHueComponent, saturation: &selectedColorSaturationComponent, brightness: &selectedColorBrightnessComponent, alpha: nil)

        let desaturatedColor = UIColor(hue: selectedColorHueComponent, saturation: 0, brightness: selectedColorBrightnessComponent, alpha: selectedColor.cgColor.alpha)
        var desaturatedColorHueComponent: CGFloat = 1
        var desaturatedColorSaturationComponent: CGFloat = 1
        var desaturatedColorBrightnessComponent: CGFloat = 1
        desaturatedColor.getHue(&desaturatedColorHueComponent, saturation: &desaturatedColorSaturationComponent, brightness: &desaturatedColorBrightnessComponent, alpha: nil)

        let unselectedColor = UIColor(hue: desaturatedColorHueComponent, saturation: desaturatedColorSaturationComponent, brightness: 0.7, alpha: desaturatedColor.cgColor.alpha)
        let strokeColor3 = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000)

        //// Variable Declarations
        let unselected = !selected

        //// cardBackground Drawing
        let cardBackgroundRect = CGRect(x: 0, y: 0, width: 26, height: 34)
        context.saveGState()
        context.clip(to: cardBackgroundRect)
        context.translateBy(x: cardBackgroundRect.minX, y: cardBackgroundRect.minY)

        HKStyle.drawCard(frame: CGRect(origin: .zero, size: cardBackgroundRect.size), resizing: .stretch, selectedBackgroundColor: selectedBackgroundColor, selected: selected)
        context.restoreGState()


        if (selected) {
            //// selectedGroup
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 12.32, y: 12.86))
            bezier3Path.addCurve(to: CGPoint(x: 12, y: 10.11), controlPoint1: CGPoint(x: 12.85, y: 12), controlPoint2: CGPoint(x: 12.75, y: 10.86))
            bezier3Path.addCurve(to: CGPoint(x: 8.85, y: 10.11), controlPoint1: CGPoint(x: 11.13, y: 9.24), controlPoint2: CGPoint(x: 9.72, y: 9.24))
            bezier3Path.addCurve(to: CGPoint(x: 8.56, y: 12.9), controlPoint1: CGPoint(x: 8.09, y: 10.87), controlPoint2: CGPoint(x: 7.99, y: 12.04))
            strokeColor3.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.miterLimit = 10
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 9.57, y: 19.75))
            bezier4Path.addCurve(to: CGPoint(x: 9.57, y: 11.86), controlPoint1: CGPoint(x: 9.57, y: 19.75), controlPoint2: CGPoint(x: 9.57, y: 12.54))
            bezier4Path.addCurve(to: CGPoint(x: 10.43, y: 10.83), controlPoint1: CGPoint(x: 9.57, y: 11.17), controlPoint2: CGPoint(x: 10.02, y: 10.83))
            bezier4Path.addCurve(to: CGPoint(x: 11.28, y: 11.86), controlPoint1: CGPoint(x: 10.93, y: 10.83), controlPoint2: CGPoint(x: 11.28, y: 11.17))
            bezier4Path.addCurve(to: CGPoint(x: 11.28, y: 16.66), controlPoint1: CGPoint(x: 11.28, y: 12.54), controlPoint2: CGPoint(x: 11.28, y: 16.31))
            bezier4Path.addCurve(to: CGPoint(x: 11.64, y: 17.34), controlPoint1: CGPoint(x: 11.28, y: 17), controlPoint2: CGPoint(x: 11.28, y: 17.34))
            bezier4Path.addCurve(to: CGPoint(x: 11.97, y: 16.66), controlPoint1: CGPoint(x: 12, y: 17.34), controlPoint2: CGPoint(x: 11.97, y: 17))
            bezier4Path.addCurve(to: CGPoint(x: 11.97, y: 15.97), controlPoint1: CGPoint(x: 11.97, y: 16.31), controlPoint2: CGPoint(x: 11.97, y: 16.66))
            bezier4Path.addCurve(to: CGPoint(x: 12.83, y: 14.94), controlPoint1: CGPoint(x: 11.97, y: 15.29), controlPoint2: CGPoint(x: 12.31, y: 14.94))
            bezier4Path.addCurve(to: CGPoint(x: 13.69, y: 15.97), controlPoint1: CGPoint(x: 13.34, y: 14.94), controlPoint2: CGPoint(x: 13.69, y: 15.29))
            bezier4Path.addLine(to: CGPoint(x: 13.69, y: 16.66))
            bezier4Path.addCurve(to: CGPoint(x: 14.03, y: 17.34), controlPoint1: CGPoint(x: 13.69, y: 16.99), controlPoint2: CGPoint(x: 13.69, y: 17.34))
            bezier4Path.addCurve(to: CGPoint(x: 14.37, y: 16.66), controlPoint1: CGPoint(x: 14.37, y: 17.34), controlPoint2: CGPoint(x: 14.37, y: 17))
            bezier4Path.addCurve(to: CGPoint(x: 14.37, y: 16.31), controlPoint1: CGPoint(x: 14.37, y: 16.31), controlPoint2: CGPoint(x: 14.37, y: 17))
            bezier4Path.addCurve(to: CGPoint(x: 15.23, y: 15.29), controlPoint1: CGPoint(x: 14.37, y: 15.63), controlPoint2: CGPoint(x: 14.71, y: 15.29))
            bezier4Path.addCurve(to: CGPoint(x: 16.09, y: 16.31), controlPoint1: CGPoint(x: 15.74, y: 15.29), controlPoint2: CGPoint(x: 16.09, y: 15.63))
            bezier4Path.addCurve(to: CGPoint(x: 16.09, y: 17.34), controlPoint1: CGPoint(x: 16.09, y: 17), controlPoint2: CGPoint(x: 16.09, y: 17))
            bezier4Path.addCurve(to: CGPoint(x: 16.43, y: 18.03), controlPoint1: CGPoint(x: 16.09, y: 17.69), controlPoint2: CGPoint(x: 16.09, y: 18.03))
            bezier4Path.addCurve(to: CGPoint(x: 16.77, y: 17.34), controlPoint1: CGPoint(x: 16.77, y: 18.03), controlPoint2: CGPoint(x: 16.77, y: 17.69))
            bezier4Path.addCurve(to: CGPoint(x: 16.77, y: 17), controlPoint1: CGPoint(x: 16.77, y: 17), controlPoint2: CGPoint(x: 16.77, y: 17.69))
            bezier4Path.addCurve(to: CGPoint(x: 17.46, y: 15.97), controlPoint1: CGPoint(x: 16.77, y: 16.31), controlPoint2: CGPoint(x: 16.92, y: 15.97))
            bezier4Path.addCurve(to: CGPoint(x: 18.14, y: 17), controlPoint1: CGPoint(x: 17.95, y: 15.97), controlPoint2: CGPoint(x: 18.14, y: 16.22))
            bezier4Path.addCurve(to: CGPoint(x: 18.14, y: 18.75), controlPoint1: CGPoint(x: 18.14, y: 17.26), controlPoint2: CGPoint(x: 18.14, y: 17.39))
            bezier4Path.addCurve(to: CGPoint(x: 18.14, y: 22.14), controlPoint1: CGPoint(x: 18.14, y: 20.12), controlPoint2: CGPoint(x: 18.14, y: 20.79))
            bezier4Path.addCurve(to: CGPoint(x: 15.41, y: 24.56), controlPoint1: CGPoint(x: 18.14, y: 23.5), controlPoint2: CGPoint(x: 16.79, y: 24.56))
            bezier4Path.addCurve(to: CGPoint(x: 12.31, y: 24.56), controlPoint1: CGPoint(x: 14.04, y: 24.56), controlPoint2: CGPoint(x: 14.05, y: 24.56))
            bezier4Path.addCurve(to: CGPoint(x: 5.97, y: 19.57), controlPoint1: CGPoint(x: 9.93, y: 24.56), controlPoint2: CGPoint(x: 5.97, y: 19.57))
            bezier4Path.addCurve(to: CGPoint(x: 5.8, y: 18.03), controlPoint1: CGPoint(x: 5.63, y: 19.23), controlPoint2: CGPoint(x: 5.29, y: 18.54))
            bezier4Path.addCurve(to: CGPoint(x: 7.34, y: 18.2), controlPoint1: CGPoint(x: 6.31, y: 17.51), controlPoint2: CGPoint(x: 6.95, y: 17.92))
            bezier4Path.addLine(to: CGPoint(x: 9.57, y: 19.75))
            bezier4Path.close()
            strokeColor3.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.stroke()


        }


        if (unselected) {
            //// unselectedGroup
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 12.32, y: 12.86))
            bezierPath.addCurve(to: CGPoint(x: 12, y: 10.11), controlPoint1: CGPoint(x: 12.85, y: 12), controlPoint2: CGPoint(x: 12.75, y: 10.86))
            bezierPath.addCurve(to: CGPoint(x: 8.85, y: 10.11), controlPoint1: CGPoint(x: 11.13, y: 9.24), controlPoint2: CGPoint(x: 9.72, y: 9.24))
            bezierPath.addCurve(to: CGPoint(x: 8.56, y: 12.9), controlPoint1: CGPoint(x: 8.09, y: 10.87), controlPoint2: CGPoint(x: 7.99, y: 12.04))
            unselectedColor.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.miterLimit = 10
            bezierPath.stroke()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 9.57, y: 19.75))
            bezier2Path.addCurve(to: CGPoint(x: 9.57, y: 11.86), controlPoint1: CGPoint(x: 9.57, y: 19.75), controlPoint2: CGPoint(x: 9.57, y: 12.54))
            bezier2Path.addCurve(to: CGPoint(x: 10.43, y: 10.83), controlPoint1: CGPoint(x: 9.57, y: 11.17), controlPoint2: CGPoint(x: 10.02, y: 10.83))
            bezier2Path.addCurve(to: CGPoint(x: 11.28, y: 11.86), controlPoint1: CGPoint(x: 10.93, y: 10.83), controlPoint2: CGPoint(x: 11.28, y: 11.17))
            bezier2Path.addCurve(to: CGPoint(x: 11.28, y: 16.66), controlPoint1: CGPoint(x: 11.28, y: 12.54), controlPoint2: CGPoint(x: 11.28, y: 16.31))
            bezier2Path.addCurve(to: CGPoint(x: 11.64, y: 17.34), controlPoint1: CGPoint(x: 11.28, y: 17), controlPoint2: CGPoint(x: 11.28, y: 17.34))
            bezier2Path.addCurve(to: CGPoint(x: 11.97, y: 16.66), controlPoint1: CGPoint(x: 12, y: 17.34), controlPoint2: CGPoint(x: 11.97, y: 17))
            bezier2Path.addCurve(to: CGPoint(x: 11.97, y: 15.97), controlPoint1: CGPoint(x: 11.97, y: 16.31), controlPoint2: CGPoint(x: 11.97, y: 16.66))
            bezier2Path.addCurve(to: CGPoint(x: 12.83, y: 14.94), controlPoint1: CGPoint(x: 11.97, y: 15.29), controlPoint2: CGPoint(x: 12.31, y: 14.94))
            bezier2Path.addCurve(to: CGPoint(x: 13.69, y: 15.97), controlPoint1: CGPoint(x: 13.34, y: 14.94), controlPoint2: CGPoint(x: 13.69, y: 15.29))
            bezier2Path.addLine(to: CGPoint(x: 13.69, y: 16.66))
            bezier2Path.addCurve(to: CGPoint(x: 14.03, y: 17.34), controlPoint1: CGPoint(x: 13.69, y: 16.99), controlPoint2: CGPoint(x: 13.69, y: 17.34))
            bezier2Path.addCurve(to: CGPoint(x: 14.37, y: 16.66), controlPoint1: CGPoint(x: 14.37, y: 17.34), controlPoint2: CGPoint(x: 14.37, y: 17))
            bezier2Path.addCurve(to: CGPoint(x: 14.37, y: 16.31), controlPoint1: CGPoint(x: 14.37, y: 16.31), controlPoint2: CGPoint(x: 14.37, y: 17))
            bezier2Path.addCurve(to: CGPoint(x: 15.23, y: 15.29), controlPoint1: CGPoint(x: 14.37, y: 15.63), controlPoint2: CGPoint(x: 14.71, y: 15.29))
            bezier2Path.addCurve(to: CGPoint(x: 16.09, y: 16.31), controlPoint1: CGPoint(x: 15.74, y: 15.29), controlPoint2: CGPoint(x: 16.09, y: 15.63))
            bezier2Path.addCurve(to: CGPoint(x: 16.09, y: 17.34), controlPoint1: CGPoint(x: 16.09, y: 17), controlPoint2: CGPoint(x: 16.09, y: 17))
            bezier2Path.addCurve(to: CGPoint(x: 16.43, y: 18.03), controlPoint1: CGPoint(x: 16.09, y: 17.69), controlPoint2: CGPoint(x: 16.09, y: 18.03))
            bezier2Path.addCurve(to: CGPoint(x: 16.77, y: 17.34), controlPoint1: CGPoint(x: 16.77, y: 18.03), controlPoint2: CGPoint(x: 16.77, y: 17.69))
            bezier2Path.addCurve(to: CGPoint(x: 16.77, y: 17), controlPoint1: CGPoint(x: 16.77, y: 17), controlPoint2: CGPoint(x: 16.77, y: 17.69))
            bezier2Path.addCurve(to: CGPoint(x: 17.46, y: 15.97), controlPoint1: CGPoint(x: 16.77, y: 16.31), controlPoint2: CGPoint(x: 16.92, y: 15.97))
            bezier2Path.addCurve(to: CGPoint(x: 18.14, y: 17), controlPoint1: CGPoint(x: 17.95, y: 15.97), controlPoint2: CGPoint(x: 18.14, y: 16.22))
            bezier2Path.addCurve(to: CGPoint(x: 18.14, y: 18.75), controlPoint1: CGPoint(x: 18.14, y: 17.26), controlPoint2: CGPoint(x: 18.14, y: 17.39))
            bezier2Path.addCurve(to: CGPoint(x: 18.14, y: 22.14), controlPoint1: CGPoint(x: 18.14, y: 20.12), controlPoint2: CGPoint(x: 18.14, y: 20.79))
            bezier2Path.addCurve(to: CGPoint(x: 15.41, y: 24.56), controlPoint1: CGPoint(x: 18.14, y: 23.5), controlPoint2: CGPoint(x: 16.79, y: 24.56))
            bezier2Path.addCurve(to: CGPoint(x: 12.31, y: 24.56), controlPoint1: CGPoint(x: 14.04, y: 24.56), controlPoint2: CGPoint(x: 14.05, y: 24.56))
            bezier2Path.addCurve(to: CGPoint(x: 5.97, y: 19.57), controlPoint1: CGPoint(x: 9.93, y: 24.56), controlPoint2: CGPoint(x: 5.97, y: 19.57))
            bezier2Path.addCurve(to: CGPoint(x: 5.8, y: 18.03), controlPoint1: CGPoint(x: 5.63, y: 19.23), controlPoint2: CGPoint(x: 5.29, y: 18.54))
            bezier2Path.addCurve(to: CGPoint(x: 7.34, y: 18.2), controlPoint1: CGPoint(x: 6.31, y: 17.51), controlPoint2: CGPoint(x: 6.95, y: 17.92))
            bezier2Path.addLine(to: CGPoint(x: 9.57, y: 19.75))
            bezier2Path.close()
            unselectedColor.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawSpawnEdgesCornersCentres(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 34), resizing: ResizingBehavior = .aspectFit, selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 34)


        //// Color Declarations
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor3 = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000)
        let fillColor5 = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000)

        //// cardBackground Drawing
        let cardBackgroundRect = CGRect(x: 0, y: 0, width: 26, height: 34)
        context.saveGState()
        context.clip(to: cardBackgroundRect)
        context.translateBy(x: cardBackgroundRect.minX, y: cardBackgroundRect.minY)

        HKStyle.drawCard(frame: CGRect(origin: .zero, size: cardBackgroundRect.size), resizing: .stretch, selectedBackgroundColor: selectedBackgroundColor, selected: selected)
        context.restoreGState()


        if (selected) {
            //// selectedGroup
            //// rightEdge Drawing
            let rightEdgePath = UIBezierPath()
            rightEdgePath.move(to: CGPoint(x: 21, y: 4))
            rightEdgePath.addLine(to: CGPoint(x: 21, y: 30))
            strokeColor3.setStroke()
            rightEdgePath.lineWidth = 2
            rightEdgePath.stroke()


            //// leftEdge Drawing
            let leftEdgePath = UIBezierPath()
            leftEdgePath.move(to: CGPoint(x: 5, y: 4))
            leftEdgePath.addLine(to: CGPoint(x: 5, y: 30))
            strokeColor3.setStroke()
            leftEdgePath.lineWidth = 2
            leftEdgePath.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 13, y: 4))
            bezier5Path.addLine(to: CGPoint(x: 13, y: 30))
            strokeColor3.setStroke()
            bezier5Path.lineWidth = 2
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 4, y: 5))
            bezier6Path.addLine(to: CGPoint(x: 21, y: 5))
            strokeColor3.setStroke()
            bezier6Path.lineWidth = 2
            bezier6Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 4, y: 17))
            bezier7Path.addLine(to: CGPoint(x: 21, y: 17))
            strokeColor3.setStroke()
            bezier7Path.lineWidth = 2
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 4, y: 29))
            bezier8Path.addLine(to: CGPoint(x: 22, y: 29))
            strokeColor3.setStroke()
            bezier8Path.lineWidth = 2
            bezier8Path.stroke()


            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 3.25, y: 3.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            ovalPath.fill()


            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalIn: CGRect(x: 19.25, y: 3.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval3Path.fill()


            //// Oval 5 Drawing
            let oval5Path = UIBezierPath(ovalIn: CGRect(x: 3.25, y: 27.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval5Path.fill()


            //// Oval 7 Drawing
            let oval7Path = UIBezierPath(ovalIn: CGRect(x: 19.25, y: 27.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval7Path.fill()


            //// Oval 9 Drawing
            let oval9Path = UIBezierPath(ovalIn: CGRect(x: 11.25, y: 3.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval9Path.fill()


            //// Oval 11 Drawing
            let oval11Path = UIBezierPath(ovalIn: CGRect(x: 11.25, y: 27.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval11Path.fill()


            //// Oval 13 Drawing
            let oval13Path = UIBezierPath(ovalIn: CGRect(x: 3.25, y: 15.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval13Path.fill()


            //// Oval 15 Drawing
            let oval15Path = UIBezierPath(ovalIn: CGRect(x: 11.25, y: 15.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval15Path.fill()


            //// Oval 17 Drawing
            let oval17Path = UIBezierPath(ovalIn: CGRect(x: 19.25, y: 15.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval17Path.fill()


            //// Oval 18 Drawing
            let oval18Path = UIBezierPath(ovalIn: CGRect(x: 19, y: 15, width: 4, height: 4))
            strokeColor2.setStroke()
            oval18Path.lineWidth = 1
            oval18Path.stroke()


            //// Oval 19 Drawing
            let oval19Path = UIBezierPath(ovalIn: CGRect(x: 19, y: 3, width: 4, height: 4))
            strokeColor2.setStroke()
            oval19Path.lineWidth = 1
            oval19Path.stroke()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 11, y: 3, width: 4, height: 4))
            strokeColor2.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


            //// Oval 4 Drawing
            let oval4Path = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 4, height: 4))
            strokeColor2.setStroke()
            oval4Path.lineWidth = 1
            oval4Path.stroke()


            //// Oval 6 Drawing
            let oval6Path = UIBezierPath(ovalIn: CGRect(x: 3, y: 15, width: 4, height: 4))
            strokeColor2.setStroke()
            oval6Path.lineWidth = 1
            oval6Path.stroke()


            //// Oval 8 Drawing
            let oval8Path = UIBezierPath(ovalIn: CGRect(x: 3, y: 27, width: 4, height: 4))
            strokeColor2.setStroke()
            oval8Path.lineWidth = 1
            oval8Path.stroke()


            //// Oval 10 Drawing
            let oval10Path = UIBezierPath(ovalIn: CGRect(x: 11, y: 27, width: 4, height: 4))
            strokeColor2.setStroke()
            oval10Path.lineWidth = 1
            oval10Path.stroke()


            //// Oval 12 Drawing
            let oval12Path = UIBezierPath(ovalIn: CGRect(x: 19, y: 27, width: 4, height: 4))
            strokeColor2.setStroke()
            oval12Path.lineWidth = 1
            oval12Path.stroke()


            //// Oval 14 Drawing
            let oval14Path = UIBezierPath(ovalIn: CGRect(x: 11, y: 15, width: 4, height: 4))
            strokeColor2.setStroke()
            oval14Path.lineWidth = 1
            oval14Path.stroke()


        }
        
        context.restoreGState()

    }

    @objc open dynamic class func drawSpawnEdgesCorners(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 34), resizing: ResizingBehavior = .aspectFit, selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 34)


        //// Color Declarations
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor3 = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000)
        let fillColor5 = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000)

        //// cardBackground Drawing
        let cardBackgroundRect = CGRect(x: 0, y: 0, width: 26, height: 34)
        context.saveGState()
        context.clip(to: cardBackgroundRect)
        context.translateBy(x: cardBackgroundRect.minX, y: cardBackgroundRect.minY)

        HKStyle.drawCard(frame: CGRect(origin: .zero, size: cardBackgroundRect.size), resizing: .stretch, selectedBackgroundColor: selectedBackgroundColor, selected: selected)
        context.restoreGState()


        if (selected) {
            //// selectedGroup
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 21, y: 4))
            bezier3Path.addLine(to: CGPoint(x: 21, y: 30))
            strokeColor3.setStroke()
            bezier3Path.lineWidth = 2
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 5, y: 4))
            bezier4Path.addLine(to: CGPoint(x: 5, y: 30))
            strokeColor3.setStroke()
            bezier4Path.lineWidth = 2
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 13, y: 4))
            bezier5Path.addLine(to: CGPoint(x: 13, y: 30))
            strokeColor3.setStroke()
            bezier5Path.lineWidth = 2
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 4, y: 5))
            bezier6Path.addLine(to: CGPoint(x: 21, y: 5))
            strokeColor3.setStroke()
            bezier6Path.lineWidth = 2
            bezier6Path.stroke()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 4, y: 17))
            bezier7Path.addLine(to: CGPoint(x: 21, y: 17))
            strokeColor3.setStroke()
            bezier7Path.lineWidth = 2
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 4, y: 29))
            bezier8Path.addLine(to: CGPoint(x: 22, y: 29))
            strokeColor3.setStroke()
            bezier8Path.lineWidth = 2
            bezier8Path.stroke()


            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 3.25, y: 3.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            ovalPath.fill()


            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalIn: CGRect(x: 19.25, y: 3.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval3Path.fill()


            //// Oval 5 Drawing
            let oval5Path = UIBezierPath(ovalIn: CGRect(x: 3.25, y: 27.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval5Path.fill()


            //// Oval 7 Drawing
            let oval7Path = UIBezierPath(ovalIn: CGRect(x: 19.25, y: 27.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval7Path.fill()


            //// Oval 9 Drawing
            let oval9Path = UIBezierPath(ovalIn: CGRect(x: 11.25, y: 3.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval9Path.fill()


            //// Oval 11 Drawing
            let oval11Path = UIBezierPath(ovalIn: CGRect(x: 11.25, y: 27.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval11Path.fill()


            //// Oval 13 Drawing
            let oval13Path = UIBezierPath(ovalIn: CGRect(x: 3.25, y: 15.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval13Path.fill()


            //// Oval 15 Drawing
            let oval15Path = UIBezierPath(ovalIn: CGRect(x: 11.25, y: 15.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval15Path.fill()


            //// Oval 17 Drawing
            let oval17Path = UIBezierPath(ovalIn: CGRect(x: 19.25, y: 15.25, width: 3.5, height: 3.5))
            fillColor5.setFill()
            oval17Path.fill()


            //// Oval 18 Drawing
            let oval18Path = UIBezierPath(ovalIn: CGRect(x: 19, y: 15, width: 4, height: 4))
            strokeColor2.setStroke()
            oval18Path.lineWidth = 1
            oval18Path.stroke()


            //// Oval 19 Drawing
            let oval19Path = UIBezierPath(ovalIn: CGRect(x: 19, y: 3, width: 4, height: 4))
            strokeColor2.setStroke()
            oval19Path.lineWidth = 1
            oval19Path.stroke()


            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalIn: CGRect(x: 11, y: 3, width: 4, height: 4))
            strokeColor2.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


            //// Oval 4 Drawing
            let oval4Path = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 4, height: 4))
            strokeColor2.setStroke()
            oval4Path.lineWidth = 1
            oval4Path.stroke()


            //// Oval 6 Drawing
            let oval6Path = UIBezierPath(ovalIn: CGRect(x: 3, y: 15, width: 4, height: 4))
            strokeColor2.setStroke()
            oval6Path.lineWidth = 1
            oval6Path.stroke()


            //// Oval 8 Drawing
            let oval8Path = UIBezierPath(ovalIn: CGRect(x: 3, y: 27, width: 4, height: 4))
            strokeColor2.setStroke()
            oval8Path.lineWidth = 1
            oval8Path.stroke()


            //// Oval 10 Drawing
            let oval10Path = UIBezierPath(ovalIn: CGRect(x: 11, y: 27, width: 4, height: 4))
            strokeColor2.setStroke()
            oval10Path.lineWidth = 1
            oval10Path.stroke()


            //// Oval 12 Drawing
            let oval12Path = UIBezierPath(ovalIn: CGRect(x: 19, y: 27, width: 4, height: 4))
            strokeColor2.setStroke()
            oval12Path.lineWidth = 1
            oval12Path.stroke()


            //// Oval 14 Drawing
            let oval14Path = UIBezierPath(ovalIn: CGRect(x: 11, y: 15, width: 4, height: 4))
            strokeColor2.setStroke()
            oval14Path.lineWidth = 1
            oval14Path.stroke()


        }
        
        context.restoreGState()

    }

    //// Generated Images

    @objc open dynamic class func imageOfSliderHandle(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            HKStyle.drawSliderHandle(selectedColor: selectedColor, selected: selected)

        let imageOfSliderHandle = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfSliderHandle
    }

    @objc open dynamic class func imageOfSliderBarHighlight(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 2), false, 0)
            HKStyle.drawSliderBarHighlight(selectedColor: selectedColor)

        let imageOfSliderBarHighlight = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets(top: 0, left: 2, bottom: 0, right: 2), resizingMode: .stretch)
        UIGraphicsEndImageContext()

        return imageOfSliderBarHighlight
    }

    @objc open dynamic class var imageOfSliderBarBackground: UIImage {
        if Cache.imageOfSliderBarBackground != nil {
            return Cache.imageOfSliderBarBackground!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 2), false, 0)
            HKStyle.drawSliderBarBackground()

        Cache.imageOfSliderBarBackground = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets(top: 0, left: 2, bottom: 0, right: 2), resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSliderBarBackground!
    }

    @objc open dynamic class func imageOfCard(selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 34), false, 0)
            HKStyle.drawCard(selectedBackgroundColor: selectedBackgroundColor, selected: selected)

        let imageOfCard = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets(top: 3, left: 3, bottom: 3, right: 3), resizingMode: .stretch)
        UIGraphicsEndImageContext()

        return imageOfCard
    }

    @objc open dynamic class var imageOfIconCanvas: UIImage {
        if Cache.imageOfIconCanvas != nil {
            return Cache.imageOfIconCanvas!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawIconCanvas()

        Cache.imageOfIconCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconCanvas!
    }

    @objc open dynamic class func imageOfSpawnUnfilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawSpawnUnfilled(selectedColor: selectedColor, selected: selected)

        let imageOfSpawnUnfilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSpawnUnfilled
    }

    @objc open dynamic class func imageOfSpawnFilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawSpawnFilled(selectedColor: selectedColor, selected: selected)

        let imageOfSpawnFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSpawnFilled
    }

    @objc open dynamic class func imageOfImpulseFilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawImpulseFilled(selectedColor: selectedColor, selected: selected)

        let imageOfImpulseFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfImpulseFilled
    }

    @objc open dynamic class func imageOfBehaveUnfilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawBehaveUnfilled(selectedColor: selectedColor, selected: selected)

        let imageOfBehaveUnfilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfBehaveUnfilled
    }

    @objc open dynamic class func imageOfBehaveFilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawBehaveFilled(selectedColor: selectedColor, selected: selected)

        let imageOfBehaveFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfBehaveFilled
    }

    @objc open dynamic class func imageOfAttractUnfilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawAttractUnfilled(selectedColor: selectedColor, selected: selected)

        let imageOfAttractUnfilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAttractUnfilled
    }

    @objc open dynamic class func imageOfAttractFilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawAttractFilled(selectedColor: selectedColor, selected: selected)

        let imageOfAttractFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAttractFilled
    }

    @objc open dynamic class func imageOfInteractUnfilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawInteractUnfilled(selectedColor: selectedColor, selected: selected)

        let imageOfInteractUnfilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfInteractUnfilled
    }

    @objc open dynamic class func imageOfInteractFilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawInteractFilled(selectedColor: selectedColor, selected: selected)

        let imageOfInteractFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfInteractFilled
    }

    @objc open dynamic class func imageOfScoreUnfilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawScoreUnfilled(selectedColor: selectedColor, selected: selected)

        let imageOfScoreUnfilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfScoreUnfilled
    }

    @objc open dynamic class func imageOfScoreFilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawScoreFilled(selectedColor: selectedColor, selected: selected)

        let imageOfScoreFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfScoreFilled
    }

    @objc open dynamic class func imageOfStyeUnfilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawStyeUnfilled(selectedColor: selectedColor, selected: selected)

        let imageOfStyeUnfilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfStyeUnfilled
    }

    @objc open dynamic class func imageOfStyleFilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawStyleFilled(selectedColor: selectedColor, selected: selected)

        let imageOfStyleFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfStyleFilled
    }

    @objc open dynamic class func imageOfMaterialUnfilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawMaterialUnfilled(selectedColor: selectedColor, selected: selected)

        let imageOfMaterialUnfilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMaterialUnfilled
    }

    @objc open dynamic class func imageOfMaterialFilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawMaterialFilled(selectedColor: selectedColor, selected: selected)

        let imageOfMaterialFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMaterialFilled
    }

    @objc open dynamic class func imageOfMusicUnfilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawMusicUnfilled(selectedColor: selectedColor, selected: selected)

        let imageOfMusicUnfilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMusicUnfilled
    }

    @objc open dynamic class func imageOfMusicFilled(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            HKStyle.drawMusicFilled(selectedColor: selectedColor, selected: selected)

        let imageOfMusicFilled = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfMusicFilled
    }

    @objc open dynamic class func imageOfAttractorNone(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 34), false, 0)
            HKStyle.drawAttractorNone(selectedColor: selectedColor, selectedBackgroundColor: selectedBackgroundColor, selected: selected)

        let imageOfAttractorNone = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAttractorNone
    }

    @objc open dynamic class func imageOfAttractorCentre(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 34), false, 0)
            HKStyle.drawAttractorCentre(selectedColor: selectedColor, selectedBackgroundColor: selectedBackgroundColor, selected: selected)

        let imageOfAttractorCentre = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAttractorCentre
    }

    @objc open dynamic class func imageOfAttractorTarget(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 34), false, 0)
            HKStyle.drawAttractorTarget(selectedColor: selectedColor, selectedBackgroundColor: selectedBackgroundColor, selected: selected)

        let imageOfAttractorTarget = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAttractorTarget
    }

    @objc open dynamic class func imageOfAttractorOpposite(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 34), false, 0)
            HKStyle.drawAttractorOpposite(selectedColor: selectedColor, selectedBackgroundColor: selectedBackgroundColor, selected: selected)

        let imageOfAttractorOpposite = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAttractorOpposite
    }

    @objc open dynamic class func imageOfAttractorFinger(selectedColor: UIColor = UIColor(red: 0.929, green: 0.271, blue: 0.482, alpha: 1.000), selectedBackgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), selected: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 34), false, 0)
            HKStyle.drawAttractorFinger(selectedColor: selectedColor, selectedBackgroundColor: selectedBackgroundColor, selected: selected)

        let imageOfAttractorFinger = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAttractorFinger
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var sliderBarBackgroundTargets: [AnyObject]! {
        get { return Cache.sliderBarBackgroundTargets }
        set {
            Cache.sliderBarBackgroundTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: HKStyle.imageOfSliderBarBackground)
            }
        }
    }

    @IBOutlet dynamic var iconCanvasTargets: [AnyObject]! {
        get { return Cache.iconCanvasTargets }
        set {
            Cache.iconCanvasTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: HKStyle.imageOfIconCanvas)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
